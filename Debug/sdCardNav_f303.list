
sdCardNav_f303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e34  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08004fbc  08004fbc  00014fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ff8  08004ff8  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08004ff8  08004ff8  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ff8  08004ff8  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ff8  08004ff8  00014ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ffc  08004ffc  00014ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08005000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          00000148  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000016c  2000016c  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f43f  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022e8  00000000  00000000  0002f493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf8  00000000  00000000  00031780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b10  00000000  00000000  00032378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f883  00000000  00000000  00032e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011609  00000000  00000000  0005270b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0516  00000000  00000000  00063d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011422a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003084  00000000  00000000  0011427c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004fa4 	.word	0x08004fa4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08004fa4 	.word	0x08004fa4

080001c8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	2110      	movs	r1, #16
 80001d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001d4:	f001 fac2 	bl	800175c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80001d8:	2001      	movs	r0, #1
 80001da:	f001 f83b 	bl	8001254 <HAL_Delay>
}
 80001de:	bf00      	nop
 80001e0:	bd80      	pop	{r7, pc}

080001e2 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80001e2:	b580      	push	{r7, lr}
 80001e4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80001e6:	2201      	movs	r2, #1
 80001e8:	2110      	movs	r1, #16
 80001ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001ee:	f001 fab5 	bl	800175c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80001f2:	2001      	movs	r0, #1
 80001f4:	f001 f82e 	bl	8001254 <HAL_Delay>
}
 80001f8:	bf00      	nop
 80001fa:	bd80      	pop	{r7, pc}

080001fc <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000206:	bf00      	nop
 8000208:	4b08      	ldr	r3, [pc, #32]	; (800022c <SPI_TxByte+0x30>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	689b      	ldr	r3, [r3, #8]
 800020e:	f003 0302 	and.w	r3, r3, #2
 8000212:	2b02      	cmp	r3, #2
 8000214:	d1f8      	bne.n	8000208 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000216:	1df9      	adds	r1, r7, #7
 8000218:	2364      	movs	r3, #100	; 0x64
 800021a:	2201      	movs	r2, #1
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <SPI_TxByte+0x30>)
 800021e:	f002 ff9e 	bl	800315e <HAL_SPI_Transmit>
}
 8000222:	bf00      	nop
 8000224:	3708      	adds	r7, #8
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	20000044 	.word	0x20000044

08000230 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
 8000238:	460b      	mov	r3, r1
 800023a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800023c:	bf00      	nop
 800023e:	4b08      	ldr	r3, [pc, #32]	; (8000260 <SPI_TxBuffer+0x30>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	689b      	ldr	r3, [r3, #8]
 8000244:	f003 0302 	and.w	r3, r3, #2
 8000248:	2b02      	cmp	r3, #2
 800024a:	d1f8      	bne.n	800023e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800024c:	887a      	ldrh	r2, [r7, #2]
 800024e:	2364      	movs	r3, #100	; 0x64
 8000250:	6879      	ldr	r1, [r7, #4]
 8000252:	4803      	ldr	r0, [pc, #12]	; (8000260 <SPI_TxBuffer+0x30>)
 8000254:	f002 ff83 	bl	800315e <HAL_SPI_Transmit>
}
 8000258:	bf00      	nop
 800025a:	3708      	adds	r7, #8
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000044 	.word	0x20000044

08000264 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800026a:	23ff      	movs	r3, #255	; 0xff
 800026c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800026e:	bf00      	nop
 8000270:	4b09      	ldr	r3, [pc, #36]	; (8000298 <SPI_RxByte+0x34>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	689b      	ldr	r3, [r3, #8]
 8000276:	f003 0302 	and.w	r3, r3, #2
 800027a:	2b02      	cmp	r3, #2
 800027c:	d1f8      	bne.n	8000270 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800027e:	1dba      	adds	r2, r7, #6
 8000280:	1df9      	adds	r1, r7, #7
 8000282:	2364      	movs	r3, #100	; 0x64
 8000284:	9300      	str	r3, [sp, #0]
 8000286:	2301      	movs	r3, #1
 8000288:	4803      	ldr	r0, [pc, #12]	; (8000298 <SPI_RxByte+0x34>)
 800028a:	f003 f8d6 	bl	800343a <HAL_SPI_TransmitReceive>

	return data;
 800028e:	79bb      	ldrb	r3, [r7, #6]
}
 8000290:	4618      	mov	r0, r3
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	20000044 	.word	0x20000044

0800029c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80002a4:	f7ff ffde 	bl	8000264 <SPI_RxByte>
 80002a8:	4603      	mov	r3, r0
 80002aa:	461a      	mov	r2, r3
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	701a      	strb	r2, [r3, #0]
}
 80002b0:	bf00      	nop
 80002b2:	3708      	adds	r7, #8
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80002be:	4b0a      	ldr	r3, [pc, #40]	; (80002e8 <SD_ReadyWait+0x30>)
 80002c0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80002c4:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80002c6:	f7ff ffcd 	bl	8000264 <SPI_RxByte>
 80002ca:	4603      	mov	r3, r0
 80002cc:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	2bff      	cmp	r3, #255	; 0xff
 80002d2:	d004      	beq.n	80002de <SD_ReadyWait+0x26>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <SD_ReadyWait+0x30>)
 80002d6:	881b      	ldrh	r3, [r3, #0]
 80002d8:	b29b      	uxth	r3, r3
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d1f3      	bne.n	80002c6 <SD_ReadyWait+0xe>

	return res;
 80002de:	79fb      	ldrb	r3, [r7, #7]
}
 80002e0:	4618      	mov	r0, r3
 80002e2:	3708      	adds	r7, #8
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	20000130 	.word	0x20000130

080002ec <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80002f2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80002f6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80002f8:	f7ff ff73 	bl	80001e2 <DESELECT>
	for(int i = 0; i < 10; i++)
 80002fc:	2300      	movs	r3, #0
 80002fe:	60bb      	str	r3, [r7, #8]
 8000300:	e005      	b.n	800030e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000302:	20ff      	movs	r0, #255	; 0xff
 8000304:	f7ff ff7a 	bl	80001fc <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	3301      	adds	r3, #1
 800030c:	60bb      	str	r3, [r7, #8]
 800030e:	68bb      	ldr	r3, [r7, #8]
 8000310:	2b09      	cmp	r3, #9
 8000312:	ddf6      	ble.n	8000302 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000314:	f7ff ff58 	bl	80001c8 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000318:	2340      	movs	r3, #64	; 0x40
 800031a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800031c:	2300      	movs	r3, #0
 800031e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000320:	2300      	movs	r3, #0
 8000322:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000324:	2300      	movs	r3, #0
 8000326:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000328:	2300      	movs	r3, #0
 800032a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800032c:	2395      	movs	r3, #149	; 0x95
 800032e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000330:	463b      	mov	r3, r7
 8000332:	2106      	movs	r1, #6
 8000334:	4618      	mov	r0, r3
 8000336:	f7ff ff7b 	bl	8000230 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800033a:	e002      	b.n	8000342 <SD_PowerOn+0x56>
	{
		cnt--;
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	3b01      	subs	r3, #1
 8000340:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000342:	f7ff ff8f 	bl	8000264 <SPI_RxByte>
 8000346:	4603      	mov	r3, r0
 8000348:	2b01      	cmp	r3, #1
 800034a:	d002      	beq.n	8000352 <SD_PowerOn+0x66>
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d1f4      	bne.n	800033c <SD_PowerOn+0x50>
	}

	DESELECT();
 8000352:	f7ff ff46 	bl	80001e2 <DESELECT>
	SPI_TxByte(0XFF);
 8000356:	20ff      	movs	r0, #255	; 0xff
 8000358:	f7ff ff50 	bl	80001fc <SPI_TxByte>

	PowerFlag = 1;
 800035c:	4b03      	ldr	r3, [pc, #12]	; (800036c <SD_PowerOn+0x80>)
 800035e:	2201      	movs	r2, #1
 8000360:	701a      	strb	r2, [r3, #0]
}
 8000362:	bf00      	nop
 8000364:	3710      	adds	r7, #16
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	20000041 	.word	0x20000041

08000370 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000374:	4b03      	ldr	r3, [pc, #12]	; (8000384 <SD_PowerOff+0x14>)
 8000376:	2200      	movs	r2, #0
 8000378:	701a      	strb	r2, [r3, #0]
}
 800037a:	bf00      	nop
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr
 8000384:	20000041 	.word	0x20000041

08000388 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800038c:	4b03      	ldr	r3, [pc, #12]	; (800039c <SD_CheckPower+0x14>)
 800038e:	781b      	ldrb	r3, [r3, #0]
}
 8000390:	4618      	mov	r0, r3
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	20000041 	.word	0x20000041

080003a0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80003aa:	4b14      	ldr	r3, [pc, #80]	; (80003fc <SD_RxDataBlock+0x5c>)
 80003ac:	22c8      	movs	r2, #200	; 0xc8
 80003ae:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80003b0:	f7ff ff58 	bl	8000264 <SPI_RxByte>
 80003b4:	4603      	mov	r3, r0
 80003b6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80003b8:	7bfb      	ldrb	r3, [r7, #15]
 80003ba:	2bff      	cmp	r3, #255	; 0xff
 80003bc:	d104      	bne.n	80003c8 <SD_RxDataBlock+0x28>
 80003be:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <SD_RxDataBlock+0x5c>)
 80003c0:	881b      	ldrh	r3, [r3, #0]
 80003c2:	b29b      	uxth	r3, r3
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d1f3      	bne.n	80003b0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80003c8:	7bfb      	ldrb	r3, [r7, #15]
 80003ca:	2bfe      	cmp	r3, #254	; 0xfe
 80003cc:	d001      	beq.n	80003d2 <SD_RxDataBlock+0x32>
 80003ce:	2300      	movs	r3, #0
 80003d0:	e00f      	b.n	80003f2 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	1c5a      	adds	r2, r3, #1
 80003d6:	607a      	str	r2, [r7, #4]
 80003d8:	4618      	mov	r0, r3
 80003da:	f7ff ff5f 	bl	800029c <SPI_RxBytePtr>
	} while(len--);
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	1e5a      	subs	r2, r3, #1
 80003e2:	603a      	str	r2, [r7, #0]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d1f4      	bne.n	80003d2 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 80003e8:	f7ff ff3c 	bl	8000264 <SPI_RxByte>
	SPI_RxByte();
 80003ec:	f7ff ff3a 	bl	8000264 <SPI_RxByte>

	return TRUE;
 80003f0:	2301      	movs	r3, #1
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	3710      	adds	r7, #16
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	2000012e 	.word	0x2000012e

08000400 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	460b      	mov	r3, r1
 800040a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800040c:	2300      	movs	r3, #0
 800040e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000410:	f7ff ff52 	bl	80002b8 <SD_ReadyWait>
 8000414:	4603      	mov	r3, r0
 8000416:	2bff      	cmp	r3, #255	; 0xff
 8000418:	d001      	beq.n	800041e <SD_TxDataBlock+0x1e>
 800041a:	2300      	movs	r3, #0
 800041c:	e02f      	b.n	800047e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800041e:	78fb      	ldrb	r3, [r7, #3]
 8000420:	4618      	mov	r0, r3
 8000422:	f7ff feeb 	bl	80001fc <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000426:	78fb      	ldrb	r3, [r7, #3]
 8000428:	2bfd      	cmp	r3, #253	; 0xfd
 800042a:	d020      	beq.n	800046e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800042c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000430:	6878      	ldr	r0, [r7, #4]
 8000432:	f7ff fefd 	bl	8000230 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000436:	f7ff ff15 	bl	8000264 <SPI_RxByte>
		SPI_RxByte();
 800043a:	f7ff ff13 	bl	8000264 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800043e:	e00b      	b.n	8000458 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000440:	f7ff ff10 	bl	8000264 <SPI_RxByte>
 8000444:	4603      	mov	r3, r0
 8000446:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000448:	7bfb      	ldrb	r3, [r7, #15]
 800044a:	f003 031f 	and.w	r3, r3, #31
 800044e:	2b05      	cmp	r3, #5
 8000450:	d006      	beq.n	8000460 <SD_TxDataBlock+0x60>
			i++;
 8000452:	7bbb      	ldrb	r3, [r7, #14]
 8000454:	3301      	adds	r3, #1
 8000456:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000458:	7bbb      	ldrb	r3, [r7, #14]
 800045a:	2b40      	cmp	r3, #64	; 0x40
 800045c:	d9f0      	bls.n	8000440 <SD_TxDataBlock+0x40>
 800045e:	e000      	b.n	8000462 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000460:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000462:	bf00      	nop
 8000464:	f7ff fefe 	bl	8000264 <SPI_RxByte>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d0fa      	beq.n	8000464 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800046e:	7bfb      	ldrb	r3, [r7, #15]
 8000470:	f003 031f 	and.w	r3, r3, #31
 8000474:	2b05      	cmp	r3, #5
 8000476:	d101      	bne.n	800047c <SD_TxDataBlock+0x7c>
 8000478:	2301      	movs	r3, #1
 800047a:	e000      	b.n	800047e <SD_TxDataBlock+0x7e>

	return FALSE;
 800047c:	2300      	movs	r3, #0
}
 800047e:	4618      	mov	r0, r3
 8000480:	3710      	adds	r7, #16
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}

08000486 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000486:	b580      	push	{r7, lr}
 8000488:	b084      	sub	sp, #16
 800048a:	af00      	add	r7, sp, #0
 800048c:	4603      	mov	r3, r0
 800048e:	6039      	str	r1, [r7, #0]
 8000490:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000492:	f7ff ff11 	bl	80002b8 <SD_ReadyWait>
 8000496:	4603      	mov	r3, r0
 8000498:	2bff      	cmp	r3, #255	; 0xff
 800049a:	d001      	beq.n	80004a0 <SD_SendCmd+0x1a>
 800049c:	23ff      	movs	r3, #255	; 0xff
 800049e:	e042      	b.n	8000526 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80004a0:	79fb      	ldrb	r3, [r7, #7]
 80004a2:	4618      	mov	r0, r3
 80004a4:	f7ff feaa 	bl	80001fc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	0e1b      	lsrs	r3, r3, #24
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	4618      	mov	r0, r3
 80004b0:	f7ff fea4 	bl	80001fc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	0c1b      	lsrs	r3, r3, #16
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	4618      	mov	r0, r3
 80004bc:	f7ff fe9e 	bl	80001fc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	0a1b      	lsrs	r3, r3, #8
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	4618      	mov	r0, r3
 80004c8:	f7ff fe98 	bl	80001fc <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	4618      	mov	r0, r3
 80004d2:	f7ff fe93 	bl	80001fc <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	2b40      	cmp	r3, #64	; 0x40
 80004da:	d102      	bne.n	80004e2 <SD_SendCmd+0x5c>
 80004dc:	2395      	movs	r3, #149	; 0x95
 80004de:	73fb      	strb	r3, [r7, #15]
 80004e0:	e007      	b.n	80004f2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	2b48      	cmp	r3, #72	; 0x48
 80004e6:	d102      	bne.n	80004ee <SD_SendCmd+0x68>
 80004e8:	2387      	movs	r3, #135	; 0x87
 80004ea:	73fb      	strb	r3, [r7, #15]
 80004ec:	e001      	b.n	80004f2 <SD_SendCmd+0x6c>
	else crc = 1;
 80004ee:	2301      	movs	r3, #1
 80004f0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f7ff fe81 	bl	80001fc <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	2b4c      	cmp	r3, #76	; 0x4c
 80004fe:	d101      	bne.n	8000504 <SD_SendCmd+0x7e>
 8000500:	f7ff feb0 	bl	8000264 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000504:	230a      	movs	r3, #10
 8000506:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000508:	f7ff feac 	bl	8000264 <SPI_RxByte>
 800050c:	4603      	mov	r3, r0
 800050e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000510:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000514:	2b00      	cmp	r3, #0
 8000516:	da05      	bge.n	8000524 <SD_SendCmd+0x9e>
 8000518:	7bbb      	ldrb	r3, [r7, #14]
 800051a:	3b01      	subs	r3, #1
 800051c:	73bb      	strb	r3, [r7, #14]
 800051e:	7bbb      	ldrb	r3, [r7, #14]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d1f1      	bne.n	8000508 <SD_SendCmd+0x82>

	return res;
 8000524:	7b7b      	ldrb	r3, [r7, #13]
}
 8000526:	4618      	mov	r0, r3
 8000528:	3710      	adds	r7, #16
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
	...

08000530 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <SD_disk_initialize+0x14>
 8000540:	2301      	movs	r3, #1
 8000542:	e0d6      	b.n	80006f2 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000544:	4b6d      	ldr	r3, [pc, #436]	; (80006fc <SD_disk_initialize+0x1cc>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	b2db      	uxtb	r3, r3
 800054a:	f003 0302 	and.w	r3, r3, #2
 800054e:	2b00      	cmp	r3, #0
 8000550:	d003      	beq.n	800055a <SD_disk_initialize+0x2a>
 8000552:	4b6a      	ldr	r3, [pc, #424]	; (80006fc <SD_disk_initialize+0x1cc>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	b2db      	uxtb	r3, r3
 8000558:	e0cb      	b.n	80006f2 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800055a:	f7ff fec7 	bl	80002ec <SD_PowerOn>

	/* slave select */
	SELECT();
 800055e:	f7ff fe33 	bl	80001c8 <SELECT>

	/* check disk type */
	type = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000566:	2100      	movs	r1, #0
 8000568:	2040      	movs	r0, #64	; 0x40
 800056a:	f7ff ff8c 	bl	8000486 <SD_SendCmd>
 800056e:	4603      	mov	r3, r0
 8000570:	2b01      	cmp	r3, #1
 8000572:	f040 80a6 	bne.w	80006c2 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000576:	4b62      	ldr	r3, [pc, #392]	; (8000700 <SD_disk_initialize+0x1d0>)
 8000578:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800057c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800057e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000582:	2048      	movs	r0, #72	; 0x48
 8000584:	f7ff ff7f 	bl	8000486 <SD_SendCmd>
 8000588:	4603      	mov	r3, r0
 800058a:	2b01      	cmp	r3, #1
 800058c:	d158      	bne.n	8000640 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800058e:	2300      	movs	r3, #0
 8000590:	73fb      	strb	r3, [r7, #15]
 8000592:	e00c      	b.n	80005ae <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000594:	7bfc      	ldrb	r4, [r7, #15]
 8000596:	f7ff fe65 	bl	8000264 <SPI_RxByte>
 800059a:	4603      	mov	r3, r0
 800059c:	461a      	mov	r2, r3
 800059e:	f104 0310 	add.w	r3, r4, #16
 80005a2:	443b      	add	r3, r7
 80005a4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	3301      	adds	r3, #1
 80005ac:	73fb      	strb	r3, [r7, #15]
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	d9ef      	bls.n	8000594 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80005b4:	7abb      	ldrb	r3, [r7, #10]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	f040 8083 	bne.w	80006c2 <SD_disk_initialize+0x192>
 80005bc:	7afb      	ldrb	r3, [r7, #11]
 80005be:	2baa      	cmp	r3, #170	; 0xaa
 80005c0:	d17f      	bne.n	80006c2 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80005c2:	2100      	movs	r1, #0
 80005c4:	2077      	movs	r0, #119	; 0x77
 80005c6:	f7ff ff5e 	bl	8000486 <SD_SendCmd>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d807      	bhi.n	80005e0 <SD_disk_initialize+0xb0>
 80005d0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80005d4:	2069      	movs	r0, #105	; 0x69
 80005d6:	f7ff ff56 	bl	8000486 <SD_SendCmd>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d005      	beq.n	80005ec <SD_disk_initialize+0xbc>
				} while (Timer1);
 80005e0:	4b47      	ldr	r3, [pc, #284]	; (8000700 <SD_disk_initialize+0x1d0>)
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d1eb      	bne.n	80005c2 <SD_disk_initialize+0x92>
 80005ea:	e000      	b.n	80005ee <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80005ec:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80005ee:	4b44      	ldr	r3, [pc, #272]	; (8000700 <SD_disk_initialize+0x1d0>)
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d064      	beq.n	80006c2 <SD_disk_initialize+0x192>
 80005f8:	2100      	movs	r1, #0
 80005fa:	207a      	movs	r0, #122	; 0x7a
 80005fc:	f7ff ff43 	bl	8000486 <SD_SendCmd>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d15d      	bne.n	80006c2 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000606:	2300      	movs	r3, #0
 8000608:	73fb      	strb	r3, [r7, #15]
 800060a:	e00c      	b.n	8000626 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 800060c:	7bfc      	ldrb	r4, [r7, #15]
 800060e:	f7ff fe29 	bl	8000264 <SPI_RxByte>
 8000612:	4603      	mov	r3, r0
 8000614:	461a      	mov	r2, r3
 8000616:	f104 0310 	add.w	r3, r4, #16
 800061a:	443b      	add	r3, r7
 800061c:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	3301      	adds	r3, #1
 8000624:	73fb      	strb	r3, [r7, #15]
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	2b03      	cmp	r3, #3
 800062a:	d9ef      	bls.n	800060c <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800062c:	7a3b      	ldrb	r3, [r7, #8]
 800062e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SD_disk_initialize+0x10a>
 8000636:	230c      	movs	r3, #12
 8000638:	e000      	b.n	800063c <SD_disk_initialize+0x10c>
 800063a:	2304      	movs	r3, #4
 800063c:	73bb      	strb	r3, [r7, #14]
 800063e:	e040      	b.n	80006c2 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000640:	2100      	movs	r1, #0
 8000642:	2077      	movs	r0, #119	; 0x77
 8000644:	f7ff ff1f 	bl	8000486 <SD_SendCmd>
 8000648:	4603      	mov	r3, r0
 800064a:	2b01      	cmp	r3, #1
 800064c:	d808      	bhi.n	8000660 <SD_disk_initialize+0x130>
 800064e:	2100      	movs	r1, #0
 8000650:	2069      	movs	r0, #105	; 0x69
 8000652:	f7ff ff18 	bl	8000486 <SD_SendCmd>
 8000656:	4603      	mov	r3, r0
 8000658:	2b01      	cmp	r3, #1
 800065a:	d801      	bhi.n	8000660 <SD_disk_initialize+0x130>
 800065c:	2302      	movs	r3, #2
 800065e:	e000      	b.n	8000662 <SD_disk_initialize+0x132>
 8000660:	2301      	movs	r3, #1
 8000662:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000664:	7bbb      	ldrb	r3, [r7, #14]
 8000666:	2b02      	cmp	r3, #2
 8000668:	d10e      	bne.n	8000688 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800066a:	2100      	movs	r1, #0
 800066c:	2077      	movs	r0, #119	; 0x77
 800066e:	f7ff ff0a 	bl	8000486 <SD_SendCmd>
 8000672:	4603      	mov	r3, r0
 8000674:	2b01      	cmp	r3, #1
 8000676:	d80e      	bhi.n	8000696 <SD_disk_initialize+0x166>
 8000678:	2100      	movs	r1, #0
 800067a:	2069      	movs	r0, #105	; 0x69
 800067c:	f7ff ff03 	bl	8000486 <SD_SendCmd>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d107      	bne.n	8000696 <SD_disk_initialize+0x166>
 8000686:	e00d      	b.n	80006a4 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000688:	2100      	movs	r1, #0
 800068a:	2041      	movs	r0, #65	; 0x41
 800068c:	f7ff fefb 	bl	8000486 <SD_SendCmd>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d005      	beq.n	80006a2 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8000696:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <SD_disk_initialize+0x1d0>)
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	b29b      	uxth	r3, r3
 800069c:	2b00      	cmp	r3, #0
 800069e:	d1e1      	bne.n	8000664 <SD_disk_initialize+0x134>
 80006a0:	e000      	b.n	80006a4 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80006a2:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80006a4:	4b16      	ldr	r3, [pc, #88]	; (8000700 <SD_disk_initialize+0x1d0>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d007      	beq.n	80006be <SD_disk_initialize+0x18e>
 80006ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b2:	2050      	movs	r0, #80	; 0x50
 80006b4:	f7ff fee7 	bl	8000486 <SD_SendCmd>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SD_disk_initialize+0x192>
 80006be:	2300      	movs	r3, #0
 80006c0:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80006c2:	4a10      	ldr	r2, [pc, #64]	; (8000704 <SD_disk_initialize+0x1d4>)
 80006c4:	7bbb      	ldrb	r3, [r7, #14]
 80006c6:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80006c8:	f7ff fd8b 	bl	80001e2 <DESELECT>
	SPI_RxByte();
 80006cc:	f7ff fdca 	bl	8000264 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80006d0:	7bbb      	ldrb	r3, [r7, #14]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d008      	beq.n	80006e8 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <SD_disk_initialize+0x1cc>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	f023 0301 	bic.w	r3, r3, #1
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <SD_disk_initialize+0x1cc>)
 80006e4:	701a      	strb	r2, [r3, #0]
 80006e6:	e001      	b.n	80006ec <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80006e8:	f7ff fe42 	bl	8000370 <SD_PowerOff>
	}

	return Stat;
 80006ec:	4b03      	ldr	r3, [pc, #12]	; (80006fc <SD_disk_initialize+0x1cc>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	b2db      	uxtb	r3, r3
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd90      	pop	{r4, r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000000 	.word	0x20000000
 8000700:	2000012e 	.word	0x2000012e
 8000704:	20000040 	.word	0x20000040

08000708 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SD_disk_status+0x14>
 8000718:	2301      	movs	r3, #1
 800071a:	e002      	b.n	8000722 <SD_disk_status+0x1a>
	return Stat;
 800071c:	4b04      	ldr	r3, [pc, #16]	; (8000730 <SD_disk_status+0x28>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	b2db      	uxtb	r3, r3
}
 8000722:	4618      	mov	r0, r3
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	20000000 	.word	0x20000000

08000734 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	60b9      	str	r1, [r7, #8]
 800073c:	607a      	str	r2, [r7, #4]
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	4603      	mov	r3, r0
 8000742:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d102      	bne.n	8000750 <SD_disk_read+0x1c>
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d101      	bne.n	8000754 <SD_disk_read+0x20>
 8000750:	2304      	movs	r3, #4
 8000752:	e051      	b.n	80007f8 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000754:	4b2a      	ldr	r3, [pc, #168]	; (8000800 <SD_disk_read+0xcc>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	b2db      	uxtb	r3, r3
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SD_disk_read+0x32>
 8000762:	2303      	movs	r3, #3
 8000764:	e048      	b.n	80007f8 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000766:	4b27      	ldr	r3, [pc, #156]	; (8000804 <SD_disk_read+0xd0>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	2b00      	cmp	r3, #0
 8000770:	d102      	bne.n	8000778 <SD_disk_read+0x44>
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	025b      	lsls	r3, r3, #9
 8000776:	607b      	str	r3, [r7, #4]

	SELECT();
 8000778:	f7ff fd26 	bl	80001c8 <SELECT>

	if (count == 1)
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d111      	bne.n	80007a6 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000782:	6879      	ldr	r1, [r7, #4]
 8000784:	2051      	movs	r0, #81	; 0x51
 8000786:	f7ff fe7e 	bl	8000486 <SD_SendCmd>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d129      	bne.n	80007e4 <SD_disk_read+0xb0>
 8000790:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000794:	68b8      	ldr	r0, [r7, #8]
 8000796:	f7ff fe03 	bl	80003a0 <SD_RxDataBlock>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d021      	beq.n	80007e4 <SD_disk_read+0xb0>
 80007a0:	2300      	movs	r3, #0
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	e01e      	b.n	80007e4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80007a6:	6879      	ldr	r1, [r7, #4]
 80007a8:	2052      	movs	r0, #82	; 0x52
 80007aa:	f7ff fe6c 	bl	8000486 <SD_SendCmd>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d117      	bne.n	80007e4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80007b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007b8:	68b8      	ldr	r0, [r7, #8]
 80007ba:	f7ff fdf1 	bl	80003a0 <SD_RxDataBlock>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d00a      	beq.n	80007da <SD_disk_read+0xa6>
				buff += 512;
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80007ca:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	3b01      	subs	r3, #1
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d1ed      	bne.n	80007b4 <SD_disk_read+0x80>
 80007d8:	e000      	b.n	80007dc <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80007da:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80007dc:	2100      	movs	r1, #0
 80007de:	204c      	movs	r0, #76	; 0x4c
 80007e0:	f7ff fe51 	bl	8000486 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80007e4:	f7ff fcfd 	bl	80001e2 <DESELECT>
	SPI_RxByte();
 80007e8:	f7ff fd3c 	bl	8000264 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	bf14      	ite	ne
 80007f2:	2301      	movne	r3, #1
 80007f4:	2300      	moveq	r3, #0
 80007f6:	b2db      	uxtb	r3, r3
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000000 	.word	0x20000000
 8000804:	20000040 	.word	0x20000040

08000808 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	60b9      	str	r1, [r7, #8]
 8000810:	607a      	str	r2, [r7, #4]
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	4603      	mov	r3, r0
 8000816:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000818:	7bfb      	ldrb	r3, [r7, #15]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d102      	bne.n	8000824 <SD_disk_write+0x1c>
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d101      	bne.n	8000828 <SD_disk_write+0x20>
 8000824:	2304      	movs	r3, #4
 8000826:	e06b      	b.n	8000900 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000828:	4b37      	ldr	r3, [pc, #220]	; (8000908 <SD_disk_write+0x100>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	b2db      	uxtb	r3, r3
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SD_disk_write+0x32>
 8000836:	2303      	movs	r3, #3
 8000838:	e062      	b.n	8000900 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800083a:	4b33      	ldr	r3, [pc, #204]	; (8000908 <SD_disk_write+0x100>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	b2db      	uxtb	r3, r3
 8000840:	f003 0304 	and.w	r3, r3, #4
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SD_disk_write+0x44>
 8000848:	2302      	movs	r3, #2
 800084a:	e059      	b.n	8000900 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800084c:	4b2f      	ldr	r3, [pc, #188]	; (800090c <SD_disk_write+0x104>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	f003 0304 	and.w	r3, r3, #4
 8000854:	2b00      	cmp	r3, #0
 8000856:	d102      	bne.n	800085e <SD_disk_write+0x56>
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	025b      	lsls	r3, r3, #9
 800085c:	607b      	str	r3, [r7, #4]

	SELECT();
 800085e:	f7ff fcb3 	bl	80001c8 <SELECT>

	if (count == 1)
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d110      	bne.n	800088a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000868:	6879      	ldr	r1, [r7, #4]
 800086a:	2058      	movs	r0, #88	; 0x58
 800086c:	f7ff fe0b 	bl	8000486 <SD_SendCmd>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d13a      	bne.n	80008ec <SD_disk_write+0xe4>
 8000876:	21fe      	movs	r1, #254	; 0xfe
 8000878:	68b8      	ldr	r0, [r7, #8]
 800087a:	f7ff fdc1 	bl	8000400 <SD_TxDataBlock>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d033      	beq.n	80008ec <SD_disk_write+0xe4>
			count = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	e030      	b.n	80008ec <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800088a:	4b20      	ldr	r3, [pc, #128]	; (800090c <SD_disk_write+0x104>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	2b00      	cmp	r3, #0
 8000894:	d007      	beq.n	80008a6 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000896:	2100      	movs	r1, #0
 8000898:	2077      	movs	r0, #119	; 0x77
 800089a:	f7ff fdf4 	bl	8000486 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800089e:	6839      	ldr	r1, [r7, #0]
 80008a0:	2057      	movs	r0, #87	; 0x57
 80008a2:	f7ff fdf0 	bl	8000486 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80008a6:	6879      	ldr	r1, [r7, #4]
 80008a8:	2059      	movs	r0, #89	; 0x59
 80008aa:	f7ff fdec 	bl	8000486 <SD_SendCmd>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d11b      	bne.n	80008ec <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80008b4:	21fc      	movs	r1, #252	; 0xfc
 80008b6:	68b8      	ldr	r0, [r7, #8]
 80008b8:	f7ff fda2 	bl	8000400 <SD_TxDataBlock>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d00a      	beq.n	80008d8 <SD_disk_write+0xd0>
				buff += 512;
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80008c8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	3b01      	subs	r3, #1
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d1ee      	bne.n	80008b4 <SD_disk_write+0xac>
 80008d6:	e000      	b.n	80008da <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80008d8:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80008da:	21fd      	movs	r1, #253	; 0xfd
 80008dc:	2000      	movs	r0, #0
 80008de:	f7ff fd8f 	bl	8000400 <SD_TxDataBlock>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d101      	bne.n	80008ec <SD_disk_write+0xe4>
			{
				count = 1;
 80008e8:	2301      	movs	r3, #1
 80008ea:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80008ec:	f7ff fc79 	bl	80001e2 <DESELECT>
	SPI_RxByte();
 80008f0:	f7ff fcb8 	bl	8000264 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	bf14      	ite	ne
 80008fa:	2301      	movne	r3, #1
 80008fc:	2300      	moveq	r3, #0
 80008fe:	b2db      	uxtb	r3, r3
}
 8000900:	4618      	mov	r0, r3
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000000 	.word	0x20000000
 800090c:	20000040 	.word	0x20000040

08000910 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b08b      	sub	sp, #44	; 0x2c
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	603a      	str	r2, [r7, #0]
 800091a:	71fb      	strb	r3, [r7, #7]
 800091c:	460b      	mov	r3, r1
 800091e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SD_disk_ioctl+0x1e>
 800092a:	2304      	movs	r3, #4
 800092c:	e115      	b.n	8000b5a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800092e:	2301      	movs	r3, #1
 8000930:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000934:	79bb      	ldrb	r3, [r7, #6]
 8000936:	2b05      	cmp	r3, #5
 8000938:	d124      	bne.n	8000984 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800093a:	6a3b      	ldr	r3, [r7, #32]
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b02      	cmp	r3, #2
 8000940:	d012      	beq.n	8000968 <SD_disk_ioctl+0x58>
 8000942:	2b02      	cmp	r3, #2
 8000944:	dc1a      	bgt.n	800097c <SD_disk_ioctl+0x6c>
 8000946:	2b00      	cmp	r3, #0
 8000948:	d002      	beq.n	8000950 <SD_disk_ioctl+0x40>
 800094a:	2b01      	cmp	r3, #1
 800094c:	d006      	beq.n	800095c <SD_disk_ioctl+0x4c>
 800094e:	e015      	b.n	800097c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000950:	f7ff fd0e 	bl	8000370 <SD_PowerOff>
			res = RES_OK;
 8000954:	2300      	movs	r3, #0
 8000956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800095a:	e0fc      	b.n	8000b56 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 800095c:	f7ff fcc6 	bl	80002ec <SD_PowerOn>
			res = RES_OK;
 8000960:	2300      	movs	r3, #0
 8000962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000966:	e0f6      	b.n	8000b56 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000968:	6a3b      	ldr	r3, [r7, #32]
 800096a:	1c5c      	adds	r4, r3, #1
 800096c:	f7ff fd0c 	bl	8000388 <SD_CheckPower>
 8000970:	4603      	mov	r3, r0
 8000972:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000974:	2300      	movs	r3, #0
 8000976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800097a:	e0ec      	b.n	8000b56 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 800097c:	2304      	movs	r3, #4
 800097e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000982:	e0e8      	b.n	8000b56 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000984:	4b77      	ldr	r3, [pc, #476]	; (8000b64 <SD_disk_ioctl+0x254>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SD_disk_ioctl+0x86>
 8000992:	2303      	movs	r3, #3
 8000994:	e0e1      	b.n	8000b5a <SD_disk_ioctl+0x24a>

		SELECT();
 8000996:	f7ff fc17 	bl	80001c8 <SELECT>

		switch (ctrl)
 800099a:	79bb      	ldrb	r3, [r7, #6]
 800099c:	2b0d      	cmp	r3, #13
 800099e:	f200 80cb 	bhi.w	8000b38 <SD_disk_ioctl+0x228>
 80009a2:	a201      	add	r2, pc, #4	; (adr r2, 80009a8 <SD_disk_ioctl+0x98>)
 80009a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a8:	08000aa3 	.word	0x08000aa3
 80009ac:	080009e1 	.word	0x080009e1
 80009b0:	08000a93 	.word	0x08000a93
 80009b4:	08000b39 	.word	0x08000b39
 80009b8:	08000b39 	.word	0x08000b39
 80009bc:	08000b39 	.word	0x08000b39
 80009c0:	08000b39 	.word	0x08000b39
 80009c4:	08000b39 	.word	0x08000b39
 80009c8:	08000b39 	.word	0x08000b39
 80009cc:	08000b39 	.word	0x08000b39
 80009d0:	08000b39 	.word	0x08000b39
 80009d4:	08000ab5 	.word	0x08000ab5
 80009d8:	08000ad9 	.word	0x08000ad9
 80009dc:	08000afd 	.word	0x08000afd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80009e0:	2100      	movs	r1, #0
 80009e2:	2049      	movs	r0, #73	; 0x49
 80009e4:	f7ff fd4f 	bl	8000486 <SD_SendCmd>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	f040 80a8 	bne.w	8000b40 <SD_disk_ioctl+0x230>
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	2110      	movs	r1, #16
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fcd2 	bl	80003a0 <SD_RxDataBlock>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	f000 809e 	beq.w	8000b40 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000a04:	7b3b      	ldrb	r3, [r7, #12]
 8000a06:	099b      	lsrs	r3, r3, #6
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d10e      	bne.n	8000a2c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000a0e:	7d7b      	ldrb	r3, [r7, #21]
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	7d3b      	ldrb	r3, [r7, #20]
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	021b      	lsls	r3, r3, #8
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	4413      	add	r3, r2
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	3301      	adds	r3, #1
 8000a20:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000a22:	8bfb      	ldrh	r3, [r7, #30]
 8000a24:	029a      	lsls	r2, r3, #10
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	e02e      	b.n	8000a8a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000a2c:	7c7b      	ldrb	r3, [r7, #17]
 8000a2e:	f003 030f 	and.w	r3, r3, #15
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	7dbb      	ldrb	r3, [r7, #22]
 8000a36:	09db      	lsrs	r3, r3, #7
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	4413      	add	r3, r2
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	7d7b      	ldrb	r3, [r7, #21]
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	f003 0306 	and.w	r3, r3, #6
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	4413      	add	r3, r2
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	3302      	adds	r3, #2
 8000a50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000a54:	7d3b      	ldrb	r3, [r7, #20]
 8000a56:	099b      	lsrs	r3, r3, #6
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	7cfb      	ldrb	r3, [r7, #19]
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	4413      	add	r3, r2
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	7cbb      	ldrb	r3, [r7, #18]
 8000a6a:	029b      	lsls	r3, r3, #10
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	4413      	add	r3, r2
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	3301      	adds	r3, #1
 8000a7a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000a7c:	8bfa      	ldrh	r2, [r7, #30]
 8000a7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a82:	3b09      	subs	r3, #9
 8000a84:	409a      	lsls	r2, r3
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000a90:	e056      	b.n	8000b40 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a98:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000aa0:	e055      	b.n	8000b4e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000aa2:	f7ff fc09 	bl	80002b8 <SD_ReadyWait>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2bff      	cmp	r3, #255	; 0xff
 8000aaa:	d14b      	bne.n	8000b44 <SD_disk_ioctl+0x234>
 8000aac:	2300      	movs	r3, #0
 8000aae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000ab2:	e047      	b.n	8000b44 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	2049      	movs	r0, #73	; 0x49
 8000ab8:	f7ff fce5 	bl	8000486 <SD_SendCmd>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d142      	bne.n	8000b48 <SD_disk_ioctl+0x238>
 8000ac2:	2110      	movs	r1, #16
 8000ac4:	6a38      	ldr	r0, [r7, #32]
 8000ac6:	f7ff fc6b 	bl	80003a0 <SD_RxDataBlock>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d03b      	beq.n	8000b48 <SD_disk_ioctl+0x238>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000ad6:	e037      	b.n	8000b48 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000ad8:	2100      	movs	r1, #0
 8000ada:	204a      	movs	r0, #74	; 0x4a
 8000adc:	f7ff fcd3 	bl	8000486 <SD_SendCmd>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d132      	bne.n	8000b4c <SD_disk_ioctl+0x23c>
 8000ae6:	2110      	movs	r1, #16
 8000ae8:	6a38      	ldr	r0, [r7, #32]
 8000aea:	f7ff fc59 	bl	80003a0 <SD_RxDataBlock>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d02b      	beq.n	8000b4c <SD_disk_ioctl+0x23c>
 8000af4:	2300      	movs	r3, #0
 8000af6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000afa:	e027      	b.n	8000b4c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000afc:	2100      	movs	r1, #0
 8000afe:	207a      	movs	r0, #122	; 0x7a
 8000b00:	f7ff fcc1 	bl	8000486 <SD_SendCmd>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d116      	bne.n	8000b38 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000b10:	e00b      	b.n	8000b2a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000b12:	6a3c      	ldr	r4, [r7, #32]
 8000b14:	1c63      	adds	r3, r4, #1
 8000b16:	623b      	str	r3, [r7, #32]
 8000b18:	f7ff fba4 	bl	8000264 <SPI_RxByte>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000b20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b24:	3301      	adds	r3, #1
 8000b26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000b2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b2e:	2b03      	cmp	r3, #3
 8000b30:	d9ef      	bls.n	8000b12 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000b38:	2304      	movs	r3, #4
 8000b3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000b3e:	e006      	b.n	8000b4e <SD_disk_ioctl+0x23e>
			break;
 8000b40:	bf00      	nop
 8000b42:	e004      	b.n	8000b4e <SD_disk_ioctl+0x23e>
			break;
 8000b44:	bf00      	nop
 8000b46:	e002      	b.n	8000b4e <SD_disk_ioctl+0x23e>
			break;
 8000b48:	bf00      	nop
 8000b4a:	e000      	b.n	8000b4e <SD_disk_ioctl+0x23e>
			break;
 8000b4c:	bf00      	nop
		}

		DESELECT();
 8000b4e:	f7ff fb48 	bl	80001e2 <DESELECT>
		SPI_RxByte();
 8000b52:	f7ff fb87 	bl	8000264 <SPI_RxByte>
	}

	return res;
 8000b56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	372c      	adds	r7, #44	; 0x2c
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd90      	pop	{r4, r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000000 	.word	0x20000000

08000b68 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b72:	f000 fb09 	bl	8001188 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b76:	f000 f86b 	bl	8000c50 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b7a:	f000 f949 	bl	8000e10 <_ZL12MX_GPIO_Initv>
	MX_SPI1_Init();
 8000b7e:	f000 f8d1 	bl	8000d24 <_ZL12MX_SPI1_Initv>
	MX_USART1_UART_Init();
 8000b82:	f000 f911 	bl	8000da8 <_ZL19MX_USART1_UART_Initv>
	MX_FATFS_Init();
 8000b86:	f003 fba3 	bl	80042d0 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */
	//sd card operations:
	FRESULT res;
	FATFS fs;

	res = f_mount(&fs, "/", 1);
 8000b8a:	f107 0318 	add.w	r3, r7, #24
 8000b8e:	3b14      	subs	r3, #20
 8000b90:	2201      	movs	r2, #1
 8000b92:	492d      	ldr	r1, [pc, #180]	; (8000c48 <main+0xe0>)
 8000b94:	4618      	mov	r0, r3
 8000b96:	f004 f933 	bl	8004e00 <f_mount>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000ba0:	f102 0217 	add.w	r2, r2, #23
 8000ba4:	7013      	strb	r3, [r2, #0]
	if (res != FR_OK) {
 8000ba6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000baa:	f103 0317 	add.w	r3, r3, #23
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d008      	beq.n	8000bc6 <main+0x5e>
		while (1) {
			HAL_GPIO_TogglePin(GPIOE, RED_LED1_Pin);
 8000bb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb8:	4824      	ldr	r0, [pc, #144]	; (8000c4c <main+0xe4>)
 8000bba:	f000 fde7 	bl	800178c <HAL_GPIO_TogglePin>
			HAL_Delay(250);
 8000bbe:	20fa      	movs	r0, #250	; 0xfa
 8000bc0:	f000 fb48 	bl	8001254 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE, RED_LED1_Pin);
 8000bc4:	e7f6      	b.n	8000bb4 <main+0x4c>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		//progress circle:
		HAL_GPIO_TogglePin(GPIOE, RED_LED1_Pin);
 8000bc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bca:	4820      	ldr	r0, [pc, #128]	; (8000c4c <main+0xe4>)
 8000bcc:	f000 fdde 	bl	800178c <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 8000bd0:	2032      	movs	r0, #50	; 0x32
 8000bd2:	f000 fb3f 	bl	8001254 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOE, YEL_LED1_Pin);
 8000bd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bda:	481c      	ldr	r0, [pc, #112]	; (8000c4c <main+0xe4>)
 8000bdc:	f000 fdd6 	bl	800178c <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 8000be0:	2032      	movs	r0, #50	; 0x32
 8000be2:	f000 fb37 	bl	8001254 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOE, GRN_LED2_Pin);
 8000be6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bea:	4818      	ldr	r0, [pc, #96]	; (8000c4c <main+0xe4>)
 8000bec:	f000 fdce 	bl	800178c <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 8000bf0:	2032      	movs	r0, #50	; 0x32
 8000bf2:	f000 fb2f 	bl	8001254 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOE, BLU_LED2_Pin);
 8000bf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bfa:	4814      	ldr	r0, [pc, #80]	; (8000c4c <main+0xe4>)
 8000bfc:	f000 fdc6 	bl	800178c <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 8000c00:	2032      	movs	r0, #50	; 0x32
 8000c02:	f000 fb27 	bl	8001254 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOE, RED_LED2_Pin);
 8000c06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c0a:	4810      	ldr	r0, [pc, #64]	; (8000c4c <main+0xe4>)
 8000c0c:	f000 fdbe 	bl	800178c <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 8000c10:	2032      	movs	r0, #50	; 0x32
 8000c12:	f000 fb1f 	bl	8001254 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOE, YEL_LED2_Pin);
 8000c16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c1a:	480c      	ldr	r0, [pc, #48]	; (8000c4c <main+0xe4>)
 8000c1c:	f000 fdb6 	bl	800178c <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 8000c20:	2032      	movs	r0, #50	; 0x32
 8000c22:	f000 fb17 	bl	8001254 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOE, GRN_LED1_Pin);
 8000c26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c2a:	4808      	ldr	r0, [pc, #32]	; (8000c4c <main+0xe4>)
 8000c2c:	f000 fdae 	bl	800178c <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 8000c30:	2032      	movs	r0, #50	; 0x32
 8000c32:	f000 fb0f 	bl	8001254 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOE, BLU_LED1_Pin);
 8000c36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c3a:	4804      	ldr	r0, [pc, #16]	; (8000c4c <main+0xe4>)
 8000c3c:	f000 fda6 	bl	800178c <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 8000c40:	2032      	movs	r0, #50	; 0x32
 8000c42:	f000 fb07 	bl	8001254 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOE, RED_LED1_Pin);
 8000c46:	e7be      	b.n	8000bc6 <main+0x5e>
 8000c48:	08004fbc 	.word	0x08004fbc
 8000c4c:	48001000 	.word	0x48001000

08000c50 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b09e      	sub	sp, #120	; 0x78
 8000c54:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c5a:	2228      	movs	r2, #40	; 0x28
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f004 f998 	bl	8004f94 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000c74:	463b      	mov	r3, r7
 8000c76:	223c      	movs	r2, #60	; 0x3c
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f004 f98a 	bl	8004f94 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c80:	2301      	movs	r3, #1
 8000c82:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c88:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c92:	2302      	movs	r3, #2
 8000c94:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c9a:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c9c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ca0:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ca2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 fd8a 	bl	80017c0 <HAL_RCC_OscConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	bf14      	ite	ne
 8000cb2:	2301      	movne	r3, #1
 8000cb4:	2300      	moveq	r3, #0
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <_Z18SystemClock_Configv+0x70>
		Error_Handler();
 8000cbc:	f000 f916 	bl	8000eec <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000cc0:	230f      	movs	r3, #15
 8000cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd0:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000cd6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000cda:	2102      	movs	r1, #2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f001 fdad 	bl	800283c <HAL_RCC_ClockConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	bf14      	ite	ne
 8000ce8:	2301      	movne	r3, #1
 8000cea:	2300      	moveq	r3, #0
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <_Z18SystemClock_Configv+0xa6>
		Error_Handler();
 8000cf2:	f000 f8fb 	bl	8000eec <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000cfe:	463b      	mov	r3, r7
 8000d00:	4618      	mov	r0, r3
 8000d02:	f001 ffd1 	bl	8002ca8 <HAL_RCCEx_PeriphCLKConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	bf14      	ite	ne
 8000d0c:	2301      	movne	r3, #1
 8000d0e:	2300      	moveq	r3, #0
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <_Z18SystemClock_Configv+0xca>
		Error_Handler();
 8000d16:	f000 f8e9 	bl	8000eec <Error_Handler>
	}
}
 8000d1a:	bf00      	nop
 8000d1c:	3778      	adds	r7, #120	; 0x78
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <_ZL12MX_SPI1_Initv>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000d28:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <_ZL12MX_SPI1_Initv+0x7c>)
 8000d2a:	4a1e      	ldr	r2, [pc, #120]	; (8000da4 <_ZL12MX_SPI1_Initv+0x80>)
 8000d2c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <_ZL12MX_SPI1_Initv+0x7c>)
 8000d30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d34:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d36:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <_ZL12MX_SPI1_Initv+0x7c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d3c:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <_ZL12MX_SPI1_Initv+0x7c>)
 8000d3e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d42:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <_ZL12MX_SPI1_Initv+0x7c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <_ZL12MX_SPI1_Initv+0x7c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d50:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <_ZL12MX_SPI1_Initv+0x7c>)
 8000d52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d56:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <_ZL12MX_SPI1_Initv+0x7c>)
 8000d5a:	2220      	movs	r2, #32
 8000d5c:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <_ZL12MX_SPI1_Initv+0x7c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d64:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <_ZL12MX_SPI1_Initv+0x7c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <_ZL12MX_SPI1_Initv+0x7c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000d70:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <_ZL12MX_SPI1_Initv+0x7c>)
 8000d72:	2207      	movs	r2, #7
 8000d74:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <_ZL12MX_SPI1_Initv+0x7c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <_ZL12MX_SPI1_Initv+0x7c>)
 8000d7e:	2208      	movs	r2, #8
 8000d80:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000d82:	4807      	ldr	r0, [pc, #28]	; (8000da0 <_ZL12MX_SPI1_Initv+0x7c>)
 8000d84:	f002 f940 	bl	8003008 <HAL_SPI_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	bf14      	ite	ne
 8000d8e:	2301      	movne	r3, #1
 8000d90:	2300      	moveq	r3, #0
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <_ZL12MX_SPI1_Initv+0x78>
		Error_Handler();
 8000d98:	f000 f8a8 	bl	8000eec <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000044 	.word	0x20000044
 8000da4:	40013000 	.word	0x40013000

08000da8 <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000dac:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000dae:	4a17      	ldr	r2, [pc, #92]	; (8000e0c <_ZL19MX_USART1_UART_Initv+0x64>)
 8000db0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 38400;
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000db4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000db8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dba:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000dcc:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000dce:	220c      	movs	r2, #12
 8000dd0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000dea:	4807      	ldr	r0, [pc, #28]	; (8000e08 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000dec:	f002 fe9c 	bl	8003b28 <HAL_UART_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	bf14      	ite	ne
 8000df6:	2301      	movne	r3, #1
 8000df8:	2300      	moveq	r3, #0
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <_ZL19MX_USART1_UART_Initv+0x5c>
		Error_Handler();
 8000e00:	f000 f874 	bl	8000eec <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	200000a8 	.word	0x200000a8
 8000e0c:	40013800 	.word	0x40013800

08000e10 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
 8000e24:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000e26:	4b2f      	ldr	r3, [pc, #188]	; (8000ee4 <_ZL12MX_GPIO_Initv+0xd4>)
 8000e28:	695b      	ldr	r3, [r3, #20]
 8000e2a:	4a2e      	ldr	r2, [pc, #184]	; (8000ee4 <_ZL12MX_GPIO_Initv+0xd4>)
 8000e2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e30:	6153      	str	r3, [r2, #20]
 8000e32:	4b2c      	ldr	r3, [pc, #176]	; (8000ee4 <_ZL12MX_GPIO_Initv+0xd4>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	4b29      	ldr	r3, [pc, #164]	; (8000ee4 <_ZL12MX_GPIO_Initv+0xd4>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	4a28      	ldr	r2, [pc, #160]	; (8000ee4 <_ZL12MX_GPIO_Initv+0xd4>)
 8000e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e48:	6153      	str	r3, [r2, #20]
 8000e4a:	4b26      	ldr	r3, [pc, #152]	; (8000ee4 <_ZL12MX_GPIO_Initv+0xd4>)
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e56:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <_ZL12MX_GPIO_Initv+0xd4>)
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	4a22      	ldr	r2, [pc, #136]	; (8000ee4 <_ZL12MX_GPIO_Initv+0xd4>)
 8000e5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e60:	6153      	str	r3, [r2, #20]
 8000e62:	4b20      	ldr	r3, [pc, #128]	; (8000ee4 <_ZL12MX_GPIO_Initv+0xd4>)
 8000e64:	695b      	ldr	r3, [r3, #20]
 8000e66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <_ZL12MX_GPIO_Initv+0xd4>)
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	4a1c      	ldr	r2, [pc, #112]	; (8000ee4 <_ZL12MX_GPIO_Initv+0xd4>)
 8000e74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e78:	6153      	str	r3, [r2, #20]
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <_ZL12MX_GPIO_Initv+0xd4>)
 8000e7c:	695b      	ldr	r3, [r3, #20]
 8000e7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2110      	movs	r1, #16
 8000e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8e:	f000 fc65 	bl	800175c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 8000e92:	2200      	movs	r2, #0
 8000e94:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000e98:	4813      	ldr	r0, [pc, #76]	; (8000ee8 <_ZL12MX_GPIO_Initv+0xd8>)
 8000e9a:	f000 fc5f 	bl	800175c <HAL_GPIO_WritePin>
			BLU_LED1_Pin | RED_LED1_Pin | YEL_LED1_Pin | GRN_LED2_Pin
					| BLU_LED2_Pin | RED_LED2_Pin | YEL_LED2_Pin | GRN_LED1_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e9e:	2310      	movs	r3, #16
 8000ea0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb8:	f000 fad6 	bl	8001468 <HAL_GPIO_Init>

	/*Configure GPIO pins : BLU_LED1_Pin RED_LED1_Pin YEL_LED1_Pin GRN_LED2_Pin
	 BLU_LED2_Pin RED_LED2_Pin YEL_LED2_Pin GRN_LED1_Pin */
	GPIO_InitStruct.Pin = BLU_LED1_Pin | RED_LED1_Pin | YEL_LED1_Pin
 8000ebc:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000ec0:	617b      	str	r3, [r7, #20]
			| GRN_LED2_Pin | BLU_LED2_Pin | RED_LED2_Pin | YEL_LED2_Pin
			| GRN_LED1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <_ZL12MX_GPIO_Initv+0xd8>)
 8000ed6:	f000 fac7 	bl	8001468 <HAL_GPIO_Init>

}
 8000eda:	bf00      	nop
 8000edc:	3728      	adds	r7, #40	; 0x28
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	48001000 	.word	0x48001000

08000eec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef0:	b672      	cpsid	i
}
 8000ef2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ef4:	e7fe      	b.n	8000ef4 <Error_Handler+0x8>
	...

08000ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <HAL_MspInit+0x44>)
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	4a0e      	ldr	r2, [pc, #56]	; (8000f3c <HAL_MspInit+0x44>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6193      	str	r3, [r2, #24]
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <HAL_MspInit+0x44>)
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <HAL_MspInit+0x44>)
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	4a08      	ldr	r2, [pc, #32]	; (8000f3c <HAL_MspInit+0x44>)
 8000f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f20:	61d3      	str	r3, [r2, #28]
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_MspInit+0x44>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40021000 	.word	0x40021000

08000f40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a17      	ldr	r2, [pc, #92]	; (8000fbc <HAL_SPI_MspInit+0x7c>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d128      	bne.n	8000fb4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f62:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <HAL_SPI_MspInit+0x80>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	4a16      	ldr	r2, [pc, #88]	; (8000fc0 <HAL_SPI_MspInit+0x80>)
 8000f68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f6c:	6193      	str	r3, [r2, #24]
 8000f6e:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <HAL_SPI_MspInit+0x80>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <HAL_SPI_MspInit+0x80>)
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	4a10      	ldr	r2, [pc, #64]	; (8000fc0 <HAL_SPI_MspInit+0x80>)
 8000f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f84:	6153      	str	r3, [r2, #20]
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <HAL_SPI_MspInit+0x80>)
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f92:	23e0      	movs	r3, #224	; 0xe0
 8000f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fa2:	2305      	movs	r3, #5
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	4619      	mov	r1, r3
 8000fac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb0:	f000 fa5a 	bl	8001468 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fb4:	bf00      	nop
 8000fb6:	3728      	adds	r7, #40	; 0x28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40013000 	.word	0x40013000
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	; 0x28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a17      	ldr	r2, [pc, #92]	; (8001040 <HAL_UART_MspInit+0x7c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d127      	bne.n	8001036 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fe6:	4b17      	ldr	r3, [pc, #92]	; (8001044 <HAL_UART_MspInit+0x80>)
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	4a16      	ldr	r2, [pc, #88]	; (8001044 <HAL_UART_MspInit+0x80>)
 8000fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff0:	6193      	str	r3, [r2, #24]
 8000ff2:	4b14      	ldr	r3, [pc, #80]	; (8001044 <HAL_UART_MspInit+0x80>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <HAL_UART_MspInit+0x80>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	4a10      	ldr	r2, [pc, #64]	; (8001044 <HAL_UART_MspInit+0x80>)
 8001004:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001008:	6153      	str	r3, [r2, #20]
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <HAL_UART_MspInit+0x80>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001016:	2330      	movs	r3, #48	; 0x30
 8001018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001022:	2303      	movs	r3, #3
 8001024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001026:	2307      	movs	r3, #7
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4619      	mov	r1, r3
 8001030:	4805      	ldr	r0, [pc, #20]	; (8001048 <HAL_UART_MspInit+0x84>)
 8001032:	f000 fa19 	bl	8001468 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001036:	bf00      	nop
 8001038:	3728      	adds	r7, #40	; 0x28
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40013800 	.word	0x40013800
 8001044:	40021000 	.word	0x40021000
 8001048:	48000800 	.word	0x48000800

0800104c <SDTimer_Handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001050:	4b0e      	ldr	r3, [pc, #56]	; (800108c <SDTimer_Handler+0x40>)
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	b29b      	uxth	r3, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d006      	beq.n	8001068 <SDTimer_Handler+0x1c>
    Timer1--;
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <SDTimer_Handler+0x40>)
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	b29b      	uxth	r3, r3
 8001060:	3b01      	subs	r3, #1
 8001062:	b29a      	uxth	r2, r3
 8001064:	4b09      	ldr	r3, [pc, #36]	; (800108c <SDTimer_Handler+0x40>)
 8001066:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <SDTimer_Handler+0x44>)
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	b29b      	uxth	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d006      	beq.n	8001080 <SDTimer_Handler+0x34>
    Timer2--;
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <SDTimer_Handler+0x44>)
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	b29b      	uxth	r3, r3
 8001078:	3b01      	subs	r3, #1
 800107a:	b29a      	uxth	r2, r3
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <SDTimer_Handler+0x44>)
 800107e:	801a      	strh	r2, [r3, #0]
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	2000012e 	.word	0x2000012e
 8001090:	20000130 	.word	0x20000130

08001094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <NMI_Handler+0x4>

0800109a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <HardFault_Handler+0x4>

080010a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <MemManage_Handler+0x4>

080010a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <BusFault_Handler+0x4>

080010ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <UsageFault_Handler+0x4>

080010b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 80010e0:	4b0a      	ldr	r3, [pc, #40]	; (800110c <SysTick_Handler+0x30>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	3301      	adds	r3, #1
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4b08      	ldr	r3, [pc, #32]	; (800110c <SysTick_Handler+0x30>)
 80010ec:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 80010ee:	4b07      	ldr	r3, [pc, #28]	; (800110c <SysTick_Handler+0x30>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b09      	cmp	r3, #9
 80010f6:	d904      	bls.n	8001102 <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 80010f8:	4b04      	ldr	r3, [pc, #16]	; (800110c <SysTick_Handler+0x30>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 80010fe:	f7ff ffa5 	bl	800104c <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001102:	f000 f887 	bl	8001214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	2000012c 	.word	0x2000012c

08001110 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <SystemInit+0x20>)
 8001116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800111a:	4a05      	ldr	r2, [pc, #20]	; (8001130 <SystemInit+0x20>)
 800111c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001120:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001134:	f8df d034 	ldr.w	sp, [pc, #52]	; 800116c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001138:	480d      	ldr	r0, [pc, #52]	; (8001170 <LoopForever+0x6>)
  ldr r1, =_edata
 800113a:	490e      	ldr	r1, [pc, #56]	; (8001174 <LoopForever+0xa>)
  ldr r2, =_sidata
 800113c:	4a0e      	ldr	r2, [pc, #56]	; (8001178 <LoopForever+0xe>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001140:	e002      	b.n	8001148 <LoopCopyDataInit>

08001142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001146:	3304      	adds	r3, #4

08001148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800114c:	d3f9      	bcc.n	8001142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114e:	4a0b      	ldr	r2, [pc, #44]	; (800117c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001150:	4c0b      	ldr	r4, [pc, #44]	; (8001180 <LoopForever+0x16>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001154:	e001      	b.n	800115a <LoopFillZerobss>

08001156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001158:	3204      	adds	r2, #4

0800115a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800115c:	d3fb      	bcc.n	8001156 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800115e:	f7ff ffd7 	bl	8001110 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001162:	f003 fef3 	bl	8004f4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001166:	f7ff fcff 	bl	8000b68 <main>

0800116a <LoopForever>:

LoopForever:
    b LoopForever
 800116a:	e7fe      	b.n	800116a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800116c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001174:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001178:	08005000 	.word	0x08005000
  ldr r2, =_sbss
 800117c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001180:	2000016c 	.word	0x2000016c

08001184 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001184:	e7fe      	b.n	8001184 <ADC1_2_IRQHandler>
	...

08001188 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <HAL_Init+0x28>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a07      	ldr	r2, [pc, #28]	; (80011b0 <HAL_Init+0x28>)
 8001192:	f043 0310 	orr.w	r3, r3, #16
 8001196:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001198:	2003      	movs	r0, #3
 800119a:	f000 f931 	bl	8001400 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800119e:	200f      	movs	r0, #15
 80011a0:	f000 f808 	bl	80011b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a4:	f7ff fea8 	bl	8000ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40022000 	.word	0x40022000

080011b4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_InitTick+0x54>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_InitTick+0x58>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	4619      	mov	r1, r3
 80011c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 f93b 	bl	800144e <HAL_SYSTICK_Config>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e00e      	b.n	8001200 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b0f      	cmp	r3, #15
 80011e6:	d80a      	bhi.n	80011fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e8:	2200      	movs	r2, #0
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011f0:	f000 f911 	bl	8001416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f4:	4a06      	ldr	r2, [pc, #24]	; (8001210 <HAL_InitTick+0x5c>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
 80011fc:	e000      	b.n	8001200 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000004 	.word	0x20000004
 800120c:	2000000c 	.word	0x2000000c
 8001210:	20000008 	.word	0x20000008

08001214 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_IncTick+0x20>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_IncTick+0x24>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4413      	add	r3, r2
 8001224:	4a04      	ldr	r2, [pc, #16]	; (8001238 <HAL_IncTick+0x24>)
 8001226:	6013      	str	r3, [r2, #0]
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	2000000c 	.word	0x2000000c
 8001238:	20000134 	.word	0x20000134

0800123c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001240:	4b03      	ldr	r3, [pc, #12]	; (8001250 <HAL_GetTick+0x14>)
 8001242:	681b      	ldr	r3, [r3, #0]
}
 8001244:	4618      	mov	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000134 	.word	0x20000134

08001254 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800125c:	f7ff ffee 	bl	800123c <HAL_GetTick>
 8001260:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800126c:	d005      	beq.n	800127a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800126e:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <HAL_Delay+0x44>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4413      	add	r3, r2
 8001278:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800127a:	bf00      	nop
 800127c:	f7ff ffde 	bl	800123c <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	429a      	cmp	r2, r3
 800128a:	d8f7      	bhi.n	800127c <HAL_Delay+0x28>
  {
  }
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	2000000c 	.word	0x2000000c

0800129c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <__NVIC_SetPriorityGrouping+0x44>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b8:	4013      	ands	r3, r2
 80012ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ce:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <__NVIC_SetPriorityGrouping+0x44>)
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	60d3      	str	r3, [r2, #12]
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e8:	4b04      	ldr	r3, [pc, #16]	; (80012fc <__NVIC_GetPriorityGrouping+0x18>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	0a1b      	lsrs	r3, r3, #8
 80012ee:	f003 0307 	and.w	r3, r3, #7
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	6039      	str	r1, [r7, #0]
 800130a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001310:	2b00      	cmp	r3, #0
 8001312:	db0a      	blt.n	800132a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	b2da      	uxtb	r2, r3
 8001318:	490c      	ldr	r1, [pc, #48]	; (800134c <__NVIC_SetPriority+0x4c>)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	0112      	lsls	r2, r2, #4
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	440b      	add	r3, r1
 8001324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001328:	e00a      	b.n	8001340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4908      	ldr	r1, [pc, #32]	; (8001350 <__NVIC_SetPriority+0x50>)
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	f003 030f 	and.w	r3, r3, #15
 8001336:	3b04      	subs	r3, #4
 8001338:	0112      	lsls	r2, r2, #4
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	440b      	add	r3, r1
 800133e:	761a      	strb	r2, [r3, #24]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000e100 	.word	0xe000e100
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001354:	b480      	push	{r7}
 8001356:	b089      	sub	sp, #36	; 0x24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f1c3 0307 	rsb	r3, r3, #7
 800136e:	2b04      	cmp	r3, #4
 8001370:	bf28      	it	cs
 8001372:	2304      	movcs	r3, #4
 8001374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3304      	adds	r3, #4
 800137a:	2b06      	cmp	r3, #6
 800137c:	d902      	bls.n	8001384 <NVIC_EncodePriority+0x30>
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3b03      	subs	r3, #3
 8001382:	e000      	b.n	8001386 <NVIC_EncodePriority+0x32>
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43da      	mvns	r2, r3
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	401a      	ands	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800139c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	43d9      	mvns	r1, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	4313      	orrs	r3, r2
         );
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3724      	adds	r7, #36	; 0x24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
	...

080013bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013cc:	d301      	bcc.n	80013d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ce:	2301      	movs	r3, #1
 80013d0:	e00f      	b.n	80013f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d2:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <SysTick_Config+0x40>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013da:	210f      	movs	r1, #15
 80013dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013e0:	f7ff ff8e 	bl	8001300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <SysTick_Config+0x40>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ea:	4b04      	ldr	r3, [pc, #16]	; (80013fc <SysTick_Config+0x40>)
 80013ec:	2207      	movs	r2, #7
 80013ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	e000e010 	.word	0xe000e010

08001400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ff47 	bl	800129c <__NVIC_SetPriorityGrouping>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af00      	add	r7, sp, #0
 800141c:	4603      	mov	r3, r0
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001428:	f7ff ff5c 	bl	80012e4 <__NVIC_GetPriorityGrouping>
 800142c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	68b9      	ldr	r1, [r7, #8]
 8001432:	6978      	ldr	r0, [r7, #20]
 8001434:	f7ff ff8e 	bl	8001354 <NVIC_EncodePriority>
 8001438:	4602      	mov	r2, r0
 800143a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff5d 	bl	8001300 <__NVIC_SetPriority>
}
 8001446:	bf00      	nop
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff ffb0 	bl	80013bc <SysTick_Config>
 800145c:	4603      	mov	r3, r0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001468:	b480      	push	{r7}
 800146a:	b087      	sub	sp, #28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001476:	e154      	b.n	8001722 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	2101      	movs	r1, #1
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	fa01 f303 	lsl.w	r3, r1, r3
 8001484:	4013      	ands	r3, r2
 8001486:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	f000 8146 	beq.w	800171c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	2b01      	cmp	r3, #1
 800149a:	d005      	beq.n	80014a8 <HAL_GPIO_Init+0x40>
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 0303 	and.w	r3, r3, #3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d130      	bne.n	800150a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	2203      	movs	r2, #3
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	68da      	ldr	r2, [r3, #12]
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014de:	2201      	movs	r2, #1
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	4013      	ands	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	091b      	lsrs	r3, r3, #4
 80014f4:	f003 0201 	and.w	r2, r3, #1
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 0303 	and.w	r3, r3, #3
 8001512:	2b03      	cmp	r3, #3
 8001514:	d017      	beq.n	8001546 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	2203      	movs	r2, #3
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4013      	ands	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d123      	bne.n	800159a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	08da      	lsrs	r2, r3, #3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3208      	adds	r2, #8
 800155a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	220f      	movs	r2, #15
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43db      	mvns	r3, r3
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4013      	ands	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	691a      	ldr	r2, [r3, #16]
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	f003 0307 	and.w	r3, r3, #7
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4313      	orrs	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	08da      	lsrs	r2, r3, #3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3208      	adds	r2, #8
 8001594:	6939      	ldr	r1, [r7, #16]
 8001596:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	2203      	movs	r2, #3
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 0203 	and.w	r2, r3, #3
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f000 80a0 	beq.w	800171c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015dc:	4b58      	ldr	r3, [pc, #352]	; (8001740 <HAL_GPIO_Init+0x2d8>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	4a57      	ldr	r2, [pc, #348]	; (8001740 <HAL_GPIO_Init+0x2d8>)
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	6193      	str	r3, [r2, #24]
 80015e8:	4b55      	ldr	r3, [pc, #340]	; (8001740 <HAL_GPIO_Init+0x2d8>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015f4:	4a53      	ldr	r2, [pc, #332]	; (8001744 <HAL_GPIO_Init+0x2dc>)
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	089b      	lsrs	r3, r3, #2
 80015fa:	3302      	adds	r3, #2
 80015fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001600:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	220f      	movs	r2, #15
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4013      	ands	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800161e:	d019      	beq.n	8001654 <HAL_GPIO_Init+0x1ec>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a49      	ldr	r2, [pc, #292]	; (8001748 <HAL_GPIO_Init+0x2e0>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d013      	beq.n	8001650 <HAL_GPIO_Init+0x1e8>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a48      	ldr	r2, [pc, #288]	; (800174c <HAL_GPIO_Init+0x2e4>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d00d      	beq.n	800164c <HAL_GPIO_Init+0x1e4>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a47      	ldr	r2, [pc, #284]	; (8001750 <HAL_GPIO_Init+0x2e8>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d007      	beq.n	8001648 <HAL_GPIO_Init+0x1e0>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a46      	ldr	r2, [pc, #280]	; (8001754 <HAL_GPIO_Init+0x2ec>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d101      	bne.n	8001644 <HAL_GPIO_Init+0x1dc>
 8001640:	2304      	movs	r3, #4
 8001642:	e008      	b.n	8001656 <HAL_GPIO_Init+0x1ee>
 8001644:	2305      	movs	r3, #5
 8001646:	e006      	b.n	8001656 <HAL_GPIO_Init+0x1ee>
 8001648:	2303      	movs	r3, #3
 800164a:	e004      	b.n	8001656 <HAL_GPIO_Init+0x1ee>
 800164c:	2302      	movs	r3, #2
 800164e:	e002      	b.n	8001656 <HAL_GPIO_Init+0x1ee>
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <HAL_GPIO_Init+0x1ee>
 8001654:	2300      	movs	r3, #0
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	f002 0203 	and.w	r2, r2, #3
 800165c:	0092      	lsls	r2, r2, #2
 800165e:	4093      	lsls	r3, r2
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4313      	orrs	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001666:	4937      	ldr	r1, [pc, #220]	; (8001744 <HAL_GPIO_Init+0x2dc>)
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	089b      	lsrs	r3, r3, #2
 800166c:	3302      	adds	r3, #2
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001674:	4b38      	ldr	r3, [pc, #224]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	43db      	mvns	r3, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001698:	4a2f      	ldr	r2, [pc, #188]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800169e:	4b2e      	ldr	r3, [pc, #184]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016c2:	4a25      	ldr	r2, [pc, #148]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016c8:	4b23      	ldr	r3, [pc, #140]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016ec:	4a1a      	ldr	r2, [pc, #104]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016f2:	4b19      	ldr	r3, [pc, #100]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	43db      	mvns	r3, r3
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	4013      	ands	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4313      	orrs	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001716:	4a10      	ldr	r2, [pc, #64]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	3301      	adds	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	fa22 f303 	lsr.w	r3, r2, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	f47f aea3 	bne.w	8001478 <HAL_GPIO_Init+0x10>
  }
}
 8001732:	bf00      	nop
 8001734:	bf00      	nop
 8001736:	371c      	adds	r7, #28
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	40021000 	.word	0x40021000
 8001744:	40010000 	.word	0x40010000
 8001748:	48000400 	.word	0x48000400
 800174c:	48000800 	.word	0x48000800
 8001750:	48000c00 	.word	0x48000c00
 8001754:	48001000 	.word	0x48001000
 8001758:	40010400 	.word	0x40010400

0800175c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	807b      	strh	r3, [r7, #2]
 8001768:	4613      	mov	r3, r2
 800176a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800176c:	787b      	ldrb	r3, [r7, #1]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001772:	887a      	ldrh	r2, [r7, #2]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001778:	e002      	b.n	8001780 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800177a:	887a      	ldrh	r2, [r7, #2]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800179e:	887a      	ldrh	r2, [r7, #2]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4013      	ands	r3, r2
 80017a4:	041a      	lsls	r2, r3, #16
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	43d9      	mvns	r1, r3
 80017aa:	887b      	ldrh	r3, [r7, #2]
 80017ac:	400b      	ands	r3, r1
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	619a      	str	r2, [r3, #24]
}
 80017b4:	bf00      	nop
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017d0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	f001 b823 	b.w	800282c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 817d 	beq.w	8001af6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80017fc:	4bbc      	ldr	r3, [pc, #752]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 030c 	and.w	r3, r3, #12
 8001804:	2b04      	cmp	r3, #4
 8001806:	d00c      	beq.n	8001822 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001808:	4bb9      	ldr	r3, [pc, #740]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 030c 	and.w	r3, r3, #12
 8001810:	2b08      	cmp	r3, #8
 8001812:	d15c      	bne.n	80018ce <HAL_RCC_OscConfig+0x10e>
 8001814:	4bb6      	ldr	r3, [pc, #728]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001820:	d155      	bne.n	80018ce <HAL_RCC_OscConfig+0x10e>
 8001822:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001826:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800182e:	fa93 f3a3 	rbit	r3, r3
 8001832:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001836:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800183a:	fab3 f383 	clz	r3, r3
 800183e:	b2db      	uxtb	r3, r3
 8001840:	095b      	lsrs	r3, r3, #5
 8001842:	b2db      	uxtb	r3, r3
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b01      	cmp	r3, #1
 800184c:	d102      	bne.n	8001854 <HAL_RCC_OscConfig+0x94>
 800184e:	4ba8      	ldr	r3, [pc, #672]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	e015      	b.n	8001880 <HAL_RCC_OscConfig+0xc0>
 8001854:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001858:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001860:	fa93 f3a3 	rbit	r3, r3
 8001864:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001868:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800186c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001870:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001874:	fa93 f3a3 	rbit	r3, r3
 8001878:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800187c:	4b9c      	ldr	r3, [pc, #624]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 800187e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001880:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001884:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001888:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800188c:	fa92 f2a2 	rbit	r2, r2
 8001890:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001894:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001898:	fab2 f282 	clz	r2, r2
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	f042 0220 	orr.w	r2, r2, #32
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	f002 021f 	and.w	r2, r2, #31
 80018a8:	2101      	movs	r1, #1
 80018aa:	fa01 f202 	lsl.w	r2, r1, r2
 80018ae:	4013      	ands	r3, r2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 811f 	beq.w	8001af4 <HAL_RCC_OscConfig+0x334>
 80018b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f040 8116 	bne.w	8001af4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	f000 bfaf 	b.w	800282c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018de:	d106      	bne.n	80018ee <HAL_RCC_OscConfig+0x12e>
 80018e0:	4b83      	ldr	r3, [pc, #524]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a82      	ldr	r2, [pc, #520]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 80018e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	e036      	b.n	800195c <HAL_RCC_OscConfig+0x19c>
 80018ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10c      	bne.n	8001918 <HAL_RCC_OscConfig+0x158>
 80018fe:	4b7c      	ldr	r3, [pc, #496]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a7b      	ldr	r2, [pc, #492]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	4b79      	ldr	r3, [pc, #484]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a78      	ldr	r2, [pc, #480]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001910:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	e021      	b.n	800195c <HAL_RCC_OscConfig+0x19c>
 8001918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800191c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001928:	d10c      	bne.n	8001944 <HAL_RCC_OscConfig+0x184>
 800192a:	4b71      	ldr	r3, [pc, #452]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a70      	ldr	r2, [pc, #448]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	4b6e      	ldr	r3, [pc, #440]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a6d      	ldr	r2, [pc, #436]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 800193c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	e00b      	b.n	800195c <HAL_RCC_OscConfig+0x19c>
 8001944:	4b6a      	ldr	r3, [pc, #424]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a69      	ldr	r2, [pc, #420]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 800194a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	4b67      	ldr	r3, [pc, #412]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a66      	ldr	r2, [pc, #408]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800195a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800195c:	4b64      	ldr	r3, [pc, #400]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 800195e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001960:	f023 020f 	bic.w	r2, r3, #15
 8001964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001968:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	495f      	ldr	r1, [pc, #380]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001972:	4313      	orrs	r3, r2
 8001974:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d059      	beq.n	8001a3a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001986:	f7ff fc59 	bl	800123c <HAL_GetTick>
 800198a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198e:	e00a      	b.n	80019a6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001990:	f7ff fc54 	bl	800123c <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b64      	cmp	r3, #100	; 0x64
 800199e:	d902      	bls.n	80019a6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	f000 bf43 	b.w	800282c <HAL_RCC_OscConfig+0x106c>
 80019a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019aa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ae:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80019b2:	fa93 f3a3 	rbit	r3, r3
 80019b6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80019ba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019be:	fab3 f383 	clz	r3, r3
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	095b      	lsrs	r3, r3, #5
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d102      	bne.n	80019d8 <HAL_RCC_OscConfig+0x218>
 80019d2:	4b47      	ldr	r3, [pc, #284]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	e015      	b.n	8001a04 <HAL_RCC_OscConfig+0x244>
 80019d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019dc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80019e4:	fa93 f3a3 	rbit	r3, r3
 80019e8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80019ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019f0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80019f4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80019f8:	fa93 f3a3 	rbit	r3, r3
 80019fc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001a00:	4b3b      	ldr	r3, [pc, #236]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a08:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001a0c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001a10:	fa92 f2a2 	rbit	r2, r2
 8001a14:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001a18:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001a1c:	fab2 f282 	clz	r2, r2
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	f042 0220 	orr.w	r2, r2, #32
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	f002 021f 	and.w	r2, r2, #31
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a32:	4013      	ands	r3, r2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0ab      	beq.n	8001990 <HAL_RCC_OscConfig+0x1d0>
 8001a38:	e05d      	b.n	8001af6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3a:	f7ff fbff 	bl	800123c <HAL_GetTick>
 8001a3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a42:	e00a      	b.n	8001a5a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a44:	f7ff fbfa 	bl	800123c <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b64      	cmp	r3, #100	; 0x64
 8001a52:	d902      	bls.n	8001a5a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	f000 bee9 	b.w	800282c <HAL_RCC_OscConfig+0x106c>
 8001a5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a5e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a62:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001a66:	fa93 f3a3 	rbit	r3, r3
 8001a6a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001a6e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a72:	fab3 f383 	clz	r3, r3
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	095b      	lsrs	r3, r3, #5
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d102      	bne.n	8001a8c <HAL_RCC_OscConfig+0x2cc>
 8001a86:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	e015      	b.n	8001ab8 <HAL_RCC_OscConfig+0x2f8>
 8001a8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a90:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a94:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001a98:	fa93 f3a3 	rbit	r3, r3
 8001a9c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001aa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aa4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001aa8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001aac:	fa93 f3a3 	rbit	r3, r3
 8001ab0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001ab4:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001abc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001ac0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001ac4:	fa92 f2a2 	rbit	r2, r2
 8001ac8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001acc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001ad0:	fab2 f282 	clz	r2, r2
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	f042 0220 	orr.w	r2, r2, #32
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	f002 021f 	and.w	r2, r2, #31
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1ab      	bne.n	8001a44 <HAL_RCC_OscConfig+0x284>
 8001aec:	e003      	b.n	8001af6 <HAL_RCC_OscConfig+0x336>
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 817d 	beq.w	8001e06 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b0c:	4ba6      	ldr	r3, [pc, #664]	; (8001da8 <HAL_RCC_OscConfig+0x5e8>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 030c 	and.w	r3, r3, #12
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00b      	beq.n	8001b30 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b18:	4ba3      	ldr	r3, [pc, #652]	; (8001da8 <HAL_RCC_OscConfig+0x5e8>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 030c 	and.w	r3, r3, #12
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d172      	bne.n	8001c0a <HAL_RCC_OscConfig+0x44a>
 8001b24:	4ba0      	ldr	r3, [pc, #640]	; (8001da8 <HAL_RCC_OscConfig+0x5e8>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d16c      	bne.n	8001c0a <HAL_RCC_OscConfig+0x44a>
 8001b30:	2302      	movs	r3, #2
 8001b32:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b36:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001b3a:	fa93 f3a3 	rbit	r3, r3
 8001b3e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001b42:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b46:	fab3 f383 	clz	r3, r3
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	095b      	lsrs	r3, r3, #5
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d102      	bne.n	8001b60 <HAL_RCC_OscConfig+0x3a0>
 8001b5a:	4b93      	ldr	r3, [pc, #588]	; (8001da8 <HAL_RCC_OscConfig+0x5e8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	e013      	b.n	8001b88 <HAL_RCC_OscConfig+0x3c8>
 8001b60:	2302      	movs	r3, #2
 8001b62:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b66:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001b6a:	fa93 f3a3 	rbit	r3, r3
 8001b6e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001b72:	2302      	movs	r3, #2
 8001b74:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001b78:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001b7c:	fa93 f3a3 	rbit	r3, r3
 8001b80:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001b84:	4b88      	ldr	r3, [pc, #544]	; (8001da8 <HAL_RCC_OscConfig+0x5e8>)
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	2202      	movs	r2, #2
 8001b8a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001b8e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001b92:	fa92 f2a2 	rbit	r2, r2
 8001b96:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001b9a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001b9e:	fab2 f282 	clz	r2, r2
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	f042 0220 	orr.w	r2, r2, #32
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	f002 021f 	and.w	r2, r2, #31
 8001bae:	2101      	movs	r1, #1
 8001bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00a      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x410>
 8001bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d002      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	f000 be2e 	b.w	800282c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd0:	4b75      	ldr	r3, [pc, #468]	; (8001da8 <HAL_RCC_OscConfig+0x5e8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bdc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	21f8      	movs	r1, #248	; 0xf8
 8001be6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bea:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001bee:	fa91 f1a1 	rbit	r1, r1
 8001bf2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001bf6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001bfa:	fab1 f181 	clz	r1, r1
 8001bfe:	b2c9      	uxtb	r1, r1
 8001c00:	408b      	lsls	r3, r1
 8001c02:	4969      	ldr	r1, [pc, #420]	; (8001da8 <HAL_RCC_OscConfig+0x5e8>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c08:	e0fd      	b.n	8001e06 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 8088 	beq.w	8001d2c <HAL_RCC_OscConfig+0x56c>
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001c26:	fa93 f3a3 	rbit	r3, r3
 8001c2a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001c2e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c32:	fab3 f383 	clz	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	461a      	mov	r2, r3
 8001c44:	2301      	movs	r3, #1
 8001c46:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c48:	f7ff faf8 	bl	800123c <HAL_GetTick>
 8001c4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c50:	e00a      	b.n	8001c68 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c52:	f7ff faf3 	bl	800123c <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d902      	bls.n	8001c68 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	f000 bde2 	b.w	800282c <HAL_RCC_OscConfig+0x106c>
 8001c68:	2302      	movs	r3, #2
 8001c6a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001c72:	fa93 f3a3 	rbit	r3, r3
 8001c76:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001c7a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7e:	fab3 f383 	clz	r3, r3
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	095b      	lsrs	r3, r3, #5
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d102      	bne.n	8001c98 <HAL_RCC_OscConfig+0x4d8>
 8001c92:	4b45      	ldr	r3, [pc, #276]	; (8001da8 <HAL_RCC_OscConfig+0x5e8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	e013      	b.n	8001cc0 <HAL_RCC_OscConfig+0x500>
 8001c98:	2302      	movs	r3, #2
 8001c9a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001ca2:	fa93 f3a3 	rbit	r3, r3
 8001ca6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001caa:	2302      	movs	r3, #2
 8001cac:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001cb0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001cb4:	fa93 f3a3 	rbit	r3, r3
 8001cb8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001cbc:	4b3a      	ldr	r3, [pc, #232]	; (8001da8 <HAL_RCC_OscConfig+0x5e8>)
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001cc6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001cca:	fa92 f2a2 	rbit	r2, r2
 8001cce:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001cd2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001cd6:	fab2 f282 	clz	r2, r2
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	f042 0220 	orr.w	r2, r2, #32
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	f002 021f 	and.w	r2, r2, #31
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cec:	4013      	ands	r3, r2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0af      	beq.n	8001c52 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf2:	4b2d      	ldr	r3, [pc, #180]	; (8001da8 <HAL_RCC_OscConfig+0x5e8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	21f8      	movs	r1, #248	; 0xf8
 8001d08:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001d10:	fa91 f1a1 	rbit	r1, r1
 8001d14:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001d18:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001d1c:	fab1 f181 	clz	r1, r1
 8001d20:	b2c9      	uxtb	r1, r1
 8001d22:	408b      	lsls	r3, r1
 8001d24:	4920      	ldr	r1, [pc, #128]	; (8001da8 <HAL_RCC_OscConfig+0x5e8>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]
 8001d2a:	e06c      	b.n	8001e06 <HAL_RCC_OscConfig+0x646>
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001d36:	fa93 f3a3 	rbit	r3, r3
 8001d3a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001d3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d42:	fab3 f383 	clz	r3, r3
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	461a      	mov	r2, r3
 8001d54:	2300      	movs	r3, #0
 8001d56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d58:	f7ff fa70 	bl	800123c <HAL_GetTick>
 8001d5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d60:	e00a      	b.n	8001d78 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d62:	f7ff fa6b 	bl	800123c <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d902      	bls.n	8001d78 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	f000 bd5a 	b.w	800282c <HAL_RCC_OscConfig+0x106c>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001d82:	fa93 f3a3 	rbit	r3, r3
 8001d86:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001d8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8e:	fab3 f383 	clz	r3, r3
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	095b      	lsrs	r3, r3, #5
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d104      	bne.n	8001dac <HAL_RCC_OscConfig+0x5ec>
 8001da2:	4b01      	ldr	r3, [pc, #4]	; (8001da8 <HAL_RCC_OscConfig+0x5e8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	e015      	b.n	8001dd4 <HAL_RCC_OscConfig+0x614>
 8001da8:	40021000 	.word	0x40021000
 8001dac:	2302      	movs	r3, #2
 8001dae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001db6:	fa93 f3a3 	rbit	r3, r3
 8001dba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001dc4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001dc8:	fa93 f3a3 	rbit	r3, r3
 8001dcc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001dd0:	4bc8      	ldr	r3, [pc, #800]	; (80020f4 <HAL_RCC_OscConfig+0x934>)
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001dda:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001dde:	fa92 f2a2 	rbit	r2, r2
 8001de2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001de6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001dea:	fab2 f282 	clz	r2, r2
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	f042 0220 	orr.w	r2, r2, #32
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	f002 021f 	and.w	r2, r2, #31
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1ad      	bne.n	8001d62 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 8110 	beq.w	800203c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d079      	beq.n	8001f20 <HAL_RCC_OscConfig+0x760>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001e36:	fa93 f3a3 	rbit	r3, r3
 8001e3a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e42:	fab3 f383 	clz	r3, r3
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4bab      	ldr	r3, [pc, #684]	; (80020f8 <HAL_RCC_OscConfig+0x938>)
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	461a      	mov	r2, r3
 8001e52:	2301      	movs	r3, #1
 8001e54:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e56:	f7ff f9f1 	bl	800123c <HAL_GetTick>
 8001e5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5e:	e00a      	b.n	8001e76 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e60:	f7ff f9ec 	bl	800123c <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d902      	bls.n	8001e76 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	f000 bcdb 	b.w	800282c <HAL_RCC_OscConfig+0x106c>
 8001e76:	2302      	movs	r3, #2
 8001e78:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001e80:	fa93 f3a3 	rbit	r3, r3
 8001e84:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001e90:	2202      	movs	r2, #2
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e98:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	fa93 f2a3 	rbit	r2, r3
 8001ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	fa93 f2a3 	rbit	r2, r3
 8001ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001ece:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed0:	4b88      	ldr	r3, [pc, #544]	; (80020f4 <HAL_RCC_OscConfig+0x934>)
 8001ed2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001edc:	2102      	movs	r1, #2
 8001ede:	6019      	str	r1, [r3, #0]
 8001ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	fa93 f1a3 	rbit	r1, r3
 8001eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ef6:	6019      	str	r1, [r3, #0]
  return result;
 8001ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	fab3 f383 	clz	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	f003 031f 	and.w	r3, r3, #31
 8001f12:	2101      	movs	r1, #1
 8001f14:	fa01 f303 	lsl.w	r3, r1, r3
 8001f18:	4013      	ands	r3, r2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0a0      	beq.n	8001e60 <HAL_RCC_OscConfig+0x6a0>
 8001f1e:	e08d      	b.n	800203c <HAL_RCC_OscConfig+0x87c>
 8001f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f24:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001f28:	2201      	movs	r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f30:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	fa93 f2a3 	rbit	r2, r3
 8001f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001f42:	601a      	str	r2, [r3, #0]
  return result;
 8001f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f48:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001f4c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f4e:	fab3 f383 	clz	r3, r3
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	461a      	mov	r2, r3
 8001f56:	4b68      	ldr	r3, [pc, #416]	; (80020f8 <HAL_RCC_OscConfig+0x938>)
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	2300      	movs	r3, #0
 8001f60:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f62:	f7ff f96b 	bl	800123c <HAL_GetTick>
 8001f66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f6a:	e00a      	b.n	8001f82 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f6c:	f7ff f966 	bl	800123c <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d902      	bls.n	8001f82 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	f000 bc55 	b.w	800282c <HAL_RCC_OscConfig+0x106c>
 8001f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f86:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f92:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	fa93 f2a3 	rbit	r2, r3
 8001f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001faa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001fae:	2202      	movs	r2, #2
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	fa93 f2a3 	rbit	r2, r3
 8001fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	fa93 f2a3 	rbit	r2, r3
 8001fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001fec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fee:	4b41      	ldr	r3, [pc, #260]	; (80020f4 <HAL_RCC_OscConfig+0x934>)
 8001ff0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001ffa:	2102      	movs	r1, #2
 8001ffc:	6019      	str	r1, [r3, #0]
 8001ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002002:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	fa93 f1a3 	rbit	r1, r3
 800200c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002010:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002014:	6019      	str	r1, [r3, #0]
  return result;
 8002016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	fab3 f383 	clz	r3, r3
 8002024:	b2db      	uxtb	r3, r3
 8002026:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800202a:	b2db      	uxtb	r3, r3
 800202c:	f003 031f 	and.w	r3, r3, #31
 8002030:	2101      	movs	r1, #1
 8002032:	fa01 f303 	lsl.w	r3, r1, r3
 8002036:	4013      	ands	r3, r2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d197      	bne.n	8001f6c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800203c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002040:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 81a1 	beq.w	8002394 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002052:	2300      	movs	r3, #0
 8002054:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002058:	4b26      	ldr	r3, [pc, #152]	; (80020f4 <HAL_RCC_OscConfig+0x934>)
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d116      	bne.n	8002092 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002064:	4b23      	ldr	r3, [pc, #140]	; (80020f4 <HAL_RCC_OscConfig+0x934>)
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	4a22      	ldr	r2, [pc, #136]	; (80020f4 <HAL_RCC_OscConfig+0x934>)
 800206a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800206e:	61d3      	str	r3, [r2, #28]
 8002070:	4b20      	ldr	r3, [pc, #128]	; (80020f4 <HAL_RCC_OscConfig+0x934>)
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002086:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800208a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800208c:	2301      	movs	r3, #1
 800208e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002092:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <HAL_RCC_OscConfig+0x93c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209a:	2b00      	cmp	r3, #0
 800209c:	d11a      	bne.n	80020d4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800209e:	4b17      	ldr	r3, [pc, #92]	; (80020fc <HAL_RCC_OscConfig+0x93c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a16      	ldr	r2, [pc, #88]	; (80020fc <HAL_RCC_OscConfig+0x93c>)
 80020a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020aa:	f7ff f8c7 	bl	800123c <HAL_GetTick>
 80020ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b2:	e009      	b.n	80020c8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b4:	f7ff f8c2 	bl	800123c <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b64      	cmp	r3, #100	; 0x64
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e3b1      	b.n	800282c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c8:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <HAL_RCC_OscConfig+0x93c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0ef      	beq.n	80020b4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d10d      	bne.n	8002100 <HAL_RCC_OscConfig+0x940>
 80020e4:	4b03      	ldr	r3, [pc, #12]	; (80020f4 <HAL_RCC_OscConfig+0x934>)
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	4a02      	ldr	r2, [pc, #8]	; (80020f4 <HAL_RCC_OscConfig+0x934>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	6213      	str	r3, [r2, #32]
 80020f0:	e03c      	b.n	800216c <HAL_RCC_OscConfig+0x9ac>
 80020f2:	bf00      	nop
 80020f4:	40021000 	.word	0x40021000
 80020f8:	10908120 	.word	0x10908120
 80020fc:	40007000 	.word	0x40007000
 8002100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002104:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10c      	bne.n	800212a <HAL_RCC_OscConfig+0x96a>
 8002110:	4bc1      	ldr	r3, [pc, #772]	; (8002418 <HAL_RCC_OscConfig+0xc58>)
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	4ac0      	ldr	r2, [pc, #768]	; (8002418 <HAL_RCC_OscConfig+0xc58>)
 8002116:	f023 0301 	bic.w	r3, r3, #1
 800211a:	6213      	str	r3, [r2, #32]
 800211c:	4bbe      	ldr	r3, [pc, #760]	; (8002418 <HAL_RCC_OscConfig+0xc58>)
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	4abd      	ldr	r2, [pc, #756]	; (8002418 <HAL_RCC_OscConfig+0xc58>)
 8002122:	f023 0304 	bic.w	r3, r3, #4
 8002126:	6213      	str	r3, [r2, #32]
 8002128:	e020      	b.n	800216c <HAL_RCC_OscConfig+0x9ac>
 800212a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	2b05      	cmp	r3, #5
 8002138:	d10c      	bne.n	8002154 <HAL_RCC_OscConfig+0x994>
 800213a:	4bb7      	ldr	r3, [pc, #732]	; (8002418 <HAL_RCC_OscConfig+0xc58>)
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	4ab6      	ldr	r2, [pc, #728]	; (8002418 <HAL_RCC_OscConfig+0xc58>)
 8002140:	f043 0304 	orr.w	r3, r3, #4
 8002144:	6213      	str	r3, [r2, #32]
 8002146:	4bb4      	ldr	r3, [pc, #720]	; (8002418 <HAL_RCC_OscConfig+0xc58>)
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	4ab3      	ldr	r2, [pc, #716]	; (8002418 <HAL_RCC_OscConfig+0xc58>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	6213      	str	r3, [r2, #32]
 8002152:	e00b      	b.n	800216c <HAL_RCC_OscConfig+0x9ac>
 8002154:	4bb0      	ldr	r3, [pc, #704]	; (8002418 <HAL_RCC_OscConfig+0xc58>)
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	4aaf      	ldr	r2, [pc, #700]	; (8002418 <HAL_RCC_OscConfig+0xc58>)
 800215a:	f023 0301 	bic.w	r3, r3, #1
 800215e:	6213      	str	r3, [r2, #32]
 8002160:	4bad      	ldr	r3, [pc, #692]	; (8002418 <HAL_RCC_OscConfig+0xc58>)
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	4aac      	ldr	r2, [pc, #688]	; (8002418 <HAL_RCC_OscConfig+0xc58>)
 8002166:	f023 0304 	bic.w	r3, r3, #4
 800216a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800216c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002170:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 8081 	beq.w	8002280 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217e:	f7ff f85d 	bl	800123c <HAL_GetTick>
 8002182:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002186:	e00b      	b.n	80021a0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002188:	f7ff f858 	bl	800123c <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	f241 3288 	movw	r2, #5000	; 0x1388
 8002198:	4293      	cmp	r3, r2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e345      	b.n	800282c <HAL_RCC_OscConfig+0x106c>
 80021a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80021a8:	2202      	movs	r2, #2
 80021aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	fa93 f2a3 	rbit	r2, r3
 80021ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021be:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80021cc:	2202      	movs	r2, #2
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	fa93 f2a3 	rbit	r2, r3
 80021de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80021e6:	601a      	str	r2, [r3, #0]
  return result;
 80021e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ec:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80021f0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f2:	fab3 f383 	clz	r3, r3
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	095b      	lsrs	r3, r3, #5
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d102      	bne.n	800220c <HAL_RCC_OscConfig+0xa4c>
 8002206:	4b84      	ldr	r3, [pc, #528]	; (8002418 <HAL_RCC_OscConfig+0xc58>)
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	e013      	b.n	8002234 <HAL_RCC_OscConfig+0xa74>
 800220c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002210:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002214:	2202      	movs	r2, #2
 8002216:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	fa93 f2a3 	rbit	r2, r3
 8002226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	4b79      	ldr	r3, [pc, #484]	; (8002418 <HAL_RCC_OscConfig+0xc58>)
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002238:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800223c:	2102      	movs	r1, #2
 800223e:	6011      	str	r1, [r2, #0]
 8002240:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002244:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002248:	6812      	ldr	r2, [r2, #0]
 800224a:	fa92 f1a2 	rbit	r1, r2
 800224e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002252:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002256:	6011      	str	r1, [r2, #0]
  return result;
 8002258:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800225c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002260:	6812      	ldr	r2, [r2, #0]
 8002262:	fab2 f282 	clz	r2, r2
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	f002 021f 	and.w	r2, r2, #31
 8002272:	2101      	movs	r1, #1
 8002274:	fa01 f202 	lsl.w	r2, r1, r2
 8002278:	4013      	ands	r3, r2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d084      	beq.n	8002188 <HAL_RCC_OscConfig+0x9c8>
 800227e:	e07f      	b.n	8002380 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002280:	f7fe ffdc 	bl	800123c <HAL_GetTick>
 8002284:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002288:	e00b      	b.n	80022a2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800228a:	f7fe ffd7 	bl	800123c <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	f241 3288 	movw	r2, #5000	; 0x1388
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e2c4      	b.n	800282c <HAL_RCC_OscConfig+0x106c>
 80022a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80022aa:	2202      	movs	r2, #2
 80022ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	fa93 f2a3 	rbit	r2, r3
 80022bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80022ce:	2202      	movs	r2, #2
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	fa93 f2a3 	rbit	r2, r3
 80022e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80022e8:	601a      	str	r2, [r3, #0]
  return result;
 80022ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ee:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80022f2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f4:	fab3 f383 	clz	r3, r3
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	095b      	lsrs	r3, r3, #5
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	f043 0302 	orr.w	r3, r3, #2
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d102      	bne.n	800230e <HAL_RCC_OscConfig+0xb4e>
 8002308:	4b43      	ldr	r3, [pc, #268]	; (8002418 <HAL_RCC_OscConfig+0xc58>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	e013      	b.n	8002336 <HAL_RCC_OscConfig+0xb76>
 800230e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002312:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002316:	2202      	movs	r2, #2
 8002318:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	fa93 f2a3 	rbit	r2, r3
 8002328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	4b39      	ldr	r3, [pc, #228]	; (8002418 <HAL_RCC_OscConfig+0xc58>)
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800233a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800233e:	2102      	movs	r1, #2
 8002340:	6011      	str	r1, [r2, #0]
 8002342:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002346:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800234a:	6812      	ldr	r2, [r2, #0]
 800234c:	fa92 f1a2 	rbit	r1, r2
 8002350:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002354:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002358:	6011      	str	r1, [r2, #0]
  return result;
 800235a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800235e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	fab2 f282 	clz	r2, r2
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	f002 021f 	and.w	r2, r2, #31
 8002374:	2101      	movs	r1, #1
 8002376:	fa01 f202 	lsl.w	r2, r1, r2
 800237a:	4013      	ands	r3, r2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d184      	bne.n	800228a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002380:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002384:	2b01      	cmp	r3, #1
 8002386:	d105      	bne.n	8002394 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002388:	4b23      	ldr	r3, [pc, #140]	; (8002418 <HAL_RCC_OscConfig+0xc58>)
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	4a22      	ldr	r2, [pc, #136]	; (8002418 <HAL_RCC_OscConfig+0xc58>)
 800238e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002392:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002398:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 8242 	beq.w	800282a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023a6:	4b1c      	ldr	r3, [pc, #112]	; (8002418 <HAL_RCC_OscConfig+0xc58>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	f000 8213 	beq.w	80027da <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	f040 8162 	bne.w	800268a <HAL_RCC_OscConfig+0xeca>
 80023c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ca:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80023ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	fa93 f2a3 	rbit	r2, r3
 80023e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80023ea:	601a      	str	r2, [r3, #0]
  return result;
 80023ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80023f4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f6:	fab3 f383 	clz	r3, r3
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002400:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	461a      	mov	r2, r3
 8002408:	2300      	movs	r3, #0
 800240a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240c:	f7fe ff16 	bl	800123c <HAL_GetTick>
 8002410:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002414:	e00c      	b.n	8002430 <HAL_RCC_OscConfig+0xc70>
 8002416:	bf00      	nop
 8002418:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800241c:	f7fe ff0e 	bl	800123c <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e1fd      	b.n	800282c <HAL_RCC_OscConfig+0x106c>
 8002430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002434:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002438:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800243c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002442:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	fa93 f2a3 	rbit	r2, r3
 800244c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002450:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002454:	601a      	str	r2, [r3, #0]
  return result;
 8002456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800245e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002460:	fab3 f383 	clz	r3, r3
 8002464:	b2db      	uxtb	r3, r3
 8002466:	095b      	lsrs	r3, r3, #5
 8002468:	b2db      	uxtb	r3, r3
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b01      	cmp	r3, #1
 8002472:	d102      	bne.n	800247a <HAL_RCC_OscConfig+0xcba>
 8002474:	4bb0      	ldr	r3, [pc, #704]	; (8002738 <HAL_RCC_OscConfig+0xf78>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	e027      	b.n	80024ca <HAL_RCC_OscConfig+0xd0a>
 800247a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002482:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002486:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	fa93 f2a3 	rbit	r2, r3
 8002496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80024a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	fa93 f2a3 	rbit	r2, r3
 80024bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	4b9c      	ldr	r3, [pc, #624]	; (8002738 <HAL_RCC_OscConfig+0xf78>)
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024ce:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80024d2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024d6:	6011      	str	r1, [r2, #0]
 80024d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024dc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80024e0:	6812      	ldr	r2, [r2, #0]
 80024e2:	fa92 f1a2 	rbit	r1, r2
 80024e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024ea:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80024ee:	6011      	str	r1, [r2, #0]
  return result;
 80024f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024f4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80024f8:	6812      	ldr	r2, [r2, #0]
 80024fa:	fab2 f282 	clz	r2, r2
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	f042 0220 	orr.w	r2, r2, #32
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	f002 021f 	and.w	r2, r2, #31
 800250a:	2101      	movs	r1, #1
 800250c:	fa01 f202 	lsl.w	r2, r1, r2
 8002510:	4013      	ands	r3, r2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d182      	bne.n	800241c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002516:	4b88      	ldr	r3, [pc, #544]	; (8002738 <HAL_RCC_OscConfig+0xf78>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800251e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002522:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800252a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	430b      	orrs	r3, r1
 8002538:	497f      	ldr	r1, [pc, #508]	; (8002738 <HAL_RCC_OscConfig+0xf78>)
 800253a:	4313      	orrs	r3, r2
 800253c:	604b      	str	r3, [r1, #4]
 800253e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002542:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002546:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800254a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002550:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	fa93 f2a3 	rbit	r2, r3
 800255a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002562:	601a      	str	r2, [r3, #0]
  return result;
 8002564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002568:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800256c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800256e:	fab3 f383 	clz	r3, r3
 8002572:	b2db      	uxtb	r3, r3
 8002574:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002578:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	461a      	mov	r2, r3
 8002580:	2301      	movs	r3, #1
 8002582:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002584:	f7fe fe5a 	bl	800123c <HAL_GetTick>
 8002588:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800258c:	e009      	b.n	80025a2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800258e:	f7fe fe55 	bl	800123c <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e144      	b.n	800282c <HAL_RCC_OscConfig+0x106c>
 80025a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80025aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	fa93 f2a3 	rbit	r2, r3
 80025be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80025c6:	601a      	str	r2, [r3, #0]
  return result;
 80025c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025cc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80025d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025d2:	fab3 f383 	clz	r3, r3
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	095b      	lsrs	r3, r3, #5
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d102      	bne.n	80025ec <HAL_RCC_OscConfig+0xe2c>
 80025e6:	4b54      	ldr	r3, [pc, #336]	; (8002738 <HAL_RCC_OscConfig+0xf78>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	e027      	b.n	800263c <HAL_RCC_OscConfig+0xe7c>
 80025ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80025f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fe:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	fa93 f2a3 	rbit	r2, r3
 8002608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002616:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800261a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002624:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	fa93 f2a3 	rbit	r2, r3
 800262e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002632:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	4b3f      	ldr	r3, [pc, #252]	; (8002738 <HAL_RCC_OscConfig+0xf78>)
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002640:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002644:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002648:	6011      	str	r1, [r2, #0]
 800264a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800264e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	fa92 f1a2 	rbit	r1, r2
 8002658:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800265c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002660:	6011      	str	r1, [r2, #0]
  return result;
 8002662:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002666:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800266a:	6812      	ldr	r2, [r2, #0]
 800266c:	fab2 f282 	clz	r2, r2
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	f042 0220 	orr.w	r2, r2, #32
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	f002 021f 	and.w	r2, r2, #31
 800267c:	2101      	movs	r1, #1
 800267e:	fa01 f202 	lsl.w	r2, r1, r2
 8002682:	4013      	ands	r3, r2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d082      	beq.n	800258e <HAL_RCC_OscConfig+0xdce>
 8002688:	e0cf      	b.n	800282a <HAL_RCC_OscConfig+0x106a>
 800268a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002692:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002696:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	fa93 f2a3 	rbit	r2, r3
 80026a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026aa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80026ae:	601a      	str	r2, [r3, #0]
  return result;
 80026b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80026b8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ba:	fab3 f383 	clz	r3, r3
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	461a      	mov	r2, r3
 80026cc:	2300      	movs	r3, #0
 80026ce:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d0:	f7fe fdb4 	bl	800123c <HAL_GetTick>
 80026d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d8:	e009      	b.n	80026ee <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026da:	f7fe fdaf 	bl	800123c <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e09e      	b.n	800282c <HAL_RCC_OscConfig+0x106c>
 80026ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80026f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002700:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	fa93 f2a3 	rbit	r2, r3
 800270a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002712:	601a      	str	r2, [r3, #0]
  return result;
 8002714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002718:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800271c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800271e:	fab3 f383 	clz	r3, r3
 8002722:	b2db      	uxtb	r3, r3
 8002724:	095b      	lsrs	r3, r3, #5
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b01      	cmp	r3, #1
 8002730:	d104      	bne.n	800273c <HAL_RCC_OscConfig+0xf7c>
 8002732:	4b01      	ldr	r3, [pc, #4]	; (8002738 <HAL_RCC_OscConfig+0xf78>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	e029      	b.n	800278c <HAL_RCC_OscConfig+0xfcc>
 8002738:	40021000 	.word	0x40021000
 800273c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002740:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002744:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002748:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	fa93 f2a3 	rbit	r2, r3
 8002758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002766:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800276a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002774:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	fa93 f2a3 	rbit	r2, r3
 800277e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002782:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	4b2b      	ldr	r3, [pc, #172]	; (8002838 <HAL_RCC_OscConfig+0x1078>)
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002790:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002794:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002798:	6011      	str	r1, [r2, #0]
 800279a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800279e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80027a2:	6812      	ldr	r2, [r2, #0]
 80027a4:	fa92 f1a2 	rbit	r1, r2
 80027a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027ac:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80027b0:	6011      	str	r1, [r2, #0]
  return result;
 80027b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027b6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80027ba:	6812      	ldr	r2, [r2, #0]
 80027bc:	fab2 f282 	clz	r2, r2
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	f042 0220 	orr.w	r2, r2, #32
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	f002 021f 	and.w	r2, r2, #31
 80027cc:	2101      	movs	r1, #1
 80027ce:	fa01 f202 	lsl.w	r2, r1, r2
 80027d2:	4013      	ands	r3, r2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d180      	bne.n	80026da <HAL_RCC_OscConfig+0xf1a>
 80027d8:	e027      	b.n	800282a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d101      	bne.n	80027ee <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e01e      	b.n	800282c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027ee:	4b12      	ldr	r3, [pc, #72]	; (8002838 <HAL_RCC_OscConfig+0x1078>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80027f6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80027fa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002802:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	429a      	cmp	r2, r3
 800280c:	d10b      	bne.n	8002826 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800280e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002812:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002822:	429a      	cmp	r2, r3
 8002824:	d001      	beq.n	800282a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000

0800283c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b09e      	sub	sp, #120	; 0x78
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002846:	2300      	movs	r3, #0
 8002848:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e162      	b.n	8002b1a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002854:	4b90      	ldr	r3, [pc, #576]	; (8002a98 <HAL_RCC_ClockConfig+0x25c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d910      	bls.n	8002884 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002862:	4b8d      	ldr	r3, [pc, #564]	; (8002a98 <HAL_RCC_ClockConfig+0x25c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f023 0207 	bic.w	r2, r3, #7
 800286a:	498b      	ldr	r1, [pc, #556]	; (8002a98 <HAL_RCC_ClockConfig+0x25c>)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	4313      	orrs	r3, r2
 8002870:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002872:	4b89      	ldr	r3, [pc, #548]	; (8002a98 <HAL_RCC_ClockConfig+0x25c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	429a      	cmp	r2, r3
 800287e:	d001      	beq.n	8002884 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e14a      	b.n	8002b1a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d008      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002890:	4b82      	ldr	r3, [pc, #520]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	497f      	ldr	r1, [pc, #508]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 80dc 	beq.w	8002a68 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d13c      	bne.n	8002932 <HAL_RCC_ClockConfig+0xf6>
 80028b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028bc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028c0:	fa93 f3a3 	rbit	r3, r3
 80028c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80028c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c8:	fab3 f383 	clz	r3, r3
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d102      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xa6>
 80028dc:	4b6f      	ldr	r3, [pc, #444]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	e00f      	b.n	8002902 <HAL_RCC_ClockConfig+0xc6>
 80028e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028ea:	fa93 f3a3 	rbit	r3, r3
 80028ee:	667b      	str	r3, [r7, #100]	; 0x64
 80028f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028f4:	663b      	str	r3, [r7, #96]	; 0x60
 80028f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028f8:	fa93 f3a3 	rbit	r3, r3
 80028fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028fe:	4b67      	ldr	r3, [pc, #412]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002906:	65ba      	str	r2, [r7, #88]	; 0x58
 8002908:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800290a:	fa92 f2a2 	rbit	r2, r2
 800290e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002910:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002912:	fab2 f282 	clz	r2, r2
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	f042 0220 	orr.w	r2, r2, #32
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	f002 021f 	and.w	r2, r2, #31
 8002922:	2101      	movs	r1, #1
 8002924:	fa01 f202 	lsl.w	r2, r1, r2
 8002928:	4013      	ands	r3, r2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d17b      	bne.n	8002a26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e0f3      	b.n	8002b1a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d13c      	bne.n	80029b4 <HAL_RCC_ClockConfig+0x178>
 800293a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800293e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002942:	fa93 f3a3 	rbit	r3, r3
 8002946:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800294a:	fab3 f383 	clz	r3, r3
 800294e:	b2db      	uxtb	r3, r3
 8002950:	095b      	lsrs	r3, r3, #5
 8002952:	b2db      	uxtb	r3, r3
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b01      	cmp	r3, #1
 800295c:	d102      	bne.n	8002964 <HAL_RCC_ClockConfig+0x128>
 800295e:	4b4f      	ldr	r3, [pc, #316]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	e00f      	b.n	8002984 <HAL_RCC_ClockConfig+0x148>
 8002964:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002968:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800296c:	fa93 f3a3 	rbit	r3, r3
 8002970:	647b      	str	r3, [r7, #68]	; 0x44
 8002972:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002976:	643b      	str	r3, [r7, #64]	; 0x40
 8002978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800297a:	fa93 f3a3 	rbit	r3, r3
 800297e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002980:	4b46      	ldr	r3, [pc, #280]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002988:	63ba      	str	r2, [r7, #56]	; 0x38
 800298a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800298c:	fa92 f2a2 	rbit	r2, r2
 8002990:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002992:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002994:	fab2 f282 	clz	r2, r2
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	f042 0220 	orr.w	r2, r2, #32
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	f002 021f 	and.w	r2, r2, #31
 80029a4:	2101      	movs	r1, #1
 80029a6:	fa01 f202 	lsl.w	r2, r1, r2
 80029aa:	4013      	ands	r3, r2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d13a      	bne.n	8002a26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e0b2      	b.n	8002b1a <HAL_RCC_ClockConfig+0x2de>
 80029b4:	2302      	movs	r3, #2
 80029b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ba:	fa93 f3a3 	rbit	r3, r3
 80029be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80029c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	095b      	lsrs	r3, r3, #5
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d102      	bne.n	80029dc <HAL_RCC_ClockConfig+0x1a0>
 80029d6:	4b31      	ldr	r3, [pc, #196]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	e00d      	b.n	80029f8 <HAL_RCC_ClockConfig+0x1bc>
 80029dc:	2302      	movs	r3, #2
 80029de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e2:	fa93 f3a3 	rbit	r3, r3
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24
 80029e8:	2302      	movs	r3, #2
 80029ea:	623b      	str	r3, [r7, #32]
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	fa93 f3a3 	rbit	r3, r3
 80029f2:	61fb      	str	r3, [r7, #28]
 80029f4:	4b29      	ldr	r3, [pc, #164]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	2202      	movs	r2, #2
 80029fa:	61ba      	str	r2, [r7, #24]
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	fa92 f2a2 	rbit	r2, r2
 8002a02:	617a      	str	r2, [r7, #20]
  return result;
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	fab2 f282 	clz	r2, r2
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	f042 0220 	orr.w	r2, r2, #32
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	f002 021f 	and.w	r2, r2, #31
 8002a16:	2101      	movs	r1, #1
 8002a18:	fa01 f202 	lsl.w	r2, r1, r2
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e079      	b.n	8002b1a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a26:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f023 0203 	bic.w	r2, r3, #3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	491a      	ldr	r1, [pc, #104]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a38:	f7fe fc00 	bl	800123c <HAL_GetTick>
 8002a3c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3e:	e00a      	b.n	8002a56 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a40:	f7fe fbfc 	bl	800123c <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e061      	b.n	8002b1a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a56:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f003 020c 	and.w	r2, r3, #12
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d1eb      	bne.n	8002a40 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_RCC_ClockConfig+0x25c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d214      	bcs.n	8002aa0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a76:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <HAL_RCC_ClockConfig+0x25c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f023 0207 	bic.w	r2, r3, #7
 8002a7e:	4906      	ldr	r1, [pc, #24]	; (8002a98 <HAL_RCC_ClockConfig+0x25c>)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a86:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <HAL_RCC_ClockConfig+0x25c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d005      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e040      	b.n	8002b1a <HAL_RCC_ClockConfig+0x2de>
 8002a98:	40022000 	.word	0x40022000
 8002a9c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d008      	beq.n	8002abe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aac:	4b1d      	ldr	r3, [pc, #116]	; (8002b24 <HAL_RCC_ClockConfig+0x2e8>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	491a      	ldr	r1, [pc, #104]	; (8002b24 <HAL_RCC_ClockConfig+0x2e8>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d009      	beq.n	8002ade <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aca:	4b16      	ldr	r3, [pc, #88]	; (8002b24 <HAL_RCC_ClockConfig+0x2e8>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	4912      	ldr	r1, [pc, #72]	; (8002b24 <HAL_RCC_ClockConfig+0x2e8>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002ade:	f000 f829 	bl	8002b34 <HAL_RCC_GetSysClockFreq>
 8002ae2:	4601      	mov	r1, r0
 8002ae4:	4b0f      	ldr	r3, [pc, #60]	; (8002b24 <HAL_RCC_ClockConfig+0x2e8>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aec:	22f0      	movs	r2, #240	; 0xf0
 8002aee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	fa92 f2a2 	rbit	r2, r2
 8002af6:	60fa      	str	r2, [r7, #12]
  return result;
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	fab2 f282 	clz	r2, r2
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	40d3      	lsrs	r3, r2
 8002b02:	4a09      	ldr	r2, [pc, #36]	; (8002b28 <HAL_RCC_ClockConfig+0x2ec>)
 8002b04:	5cd3      	ldrb	r3, [r2, r3]
 8002b06:	fa21 f303 	lsr.w	r3, r1, r3
 8002b0a:	4a08      	ldr	r2, [pc, #32]	; (8002b2c <HAL_RCC_ClockConfig+0x2f0>)
 8002b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002b0e:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <HAL_RCC_ClockConfig+0x2f4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fe fb4e 	bl	80011b4 <HAL_InitTick>
  
  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3778      	adds	r7, #120	; 0x78
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40021000 	.word	0x40021000
 8002b28:	08004fc0 	.word	0x08004fc0
 8002b2c:	20000004 	.word	0x20000004
 8002b30:	20000008 	.word	0x20000008

08002b34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b08b      	sub	sp, #44	; 0x2c
 8002b38:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61fb      	str	r3, [r7, #28]
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61bb      	str	r3, [r7, #24]
 8002b42:	2300      	movs	r3, #0
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002b4e:	4b29      	ldr	r3, [pc, #164]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f003 030c 	and.w	r3, r3, #12
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d002      	beq.n	8002b64 <HAL_RCC_GetSysClockFreq+0x30>
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d003      	beq.n	8002b6a <HAL_RCC_GetSysClockFreq+0x36>
 8002b62:	e03c      	b.n	8002bde <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b64:	4b24      	ldr	r3, [pc, #144]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b66:	623b      	str	r3, [r7, #32]
      break;
 8002b68:	e03c      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002b70:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002b74:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	fa92 f2a2 	rbit	r2, r2
 8002b7c:	607a      	str	r2, [r7, #4]
  return result;
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	fab2 f282 	clz	r2, r2
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	40d3      	lsrs	r3, r2
 8002b88:	4a1c      	ldr	r2, [pc, #112]	; (8002bfc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b8a:	5cd3      	ldrb	r3, [r2, r3]
 8002b8c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002b8e:	4b19      	ldr	r3, [pc, #100]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	220f      	movs	r2, #15
 8002b98:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	fa92 f2a2 	rbit	r2, r2
 8002ba0:	60fa      	str	r2, [r7, #12]
  return result;
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	fab2 f282 	clz	r2, r2
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	40d3      	lsrs	r3, r2
 8002bac:	4a14      	ldr	r2, [pc, #80]	; (8002c00 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002bae:	5cd3      	ldrb	r3, [r2, r3]
 8002bb0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002bbc:	4a0e      	ldr	r2, [pc, #56]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	fb02 f303 	mul.w	r3, r2, r3
 8002bca:	627b      	str	r3, [r7, #36]	; 0x24
 8002bcc:	e004      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	4a0c      	ldr	r2, [pc, #48]	; (8002c04 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002bd2:	fb02 f303 	mul.w	r3, r2, r3
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	623b      	str	r3, [r7, #32]
      break;
 8002bdc:	e002      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bde:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002be0:	623b      	str	r3, [r7, #32]
      break;
 8002be2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002be4:	6a3b      	ldr	r3, [r7, #32]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	372c      	adds	r7, #44	; 0x2c
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	007a1200 	.word	0x007a1200
 8002bfc:	08004fd8 	.word	0x08004fd8
 8002c00:	08004fe8 	.word	0x08004fe8
 8002c04:	003d0900 	.word	0x003d0900

08002c08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c0c:	4b03      	ldr	r3, [pc, #12]	; (8002c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	20000004 	.word	0x20000004

08002c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002c26:	f7ff ffef 	bl	8002c08 <HAL_RCC_GetHCLKFreq>
 8002c2a:	4601      	mov	r1, r0
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c34:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c38:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	fa92 f2a2 	rbit	r2, r2
 8002c40:	603a      	str	r2, [r7, #0]
  return result;
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	fab2 f282 	clz	r2, r2
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	40d3      	lsrs	r3, r2
 8002c4c:	4a04      	ldr	r2, [pc, #16]	; (8002c60 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002c4e:	5cd3      	ldrb	r3, [r2, r3]
 8002c50:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002c54:	4618      	mov	r0, r3
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	08004fd0 	.word	0x08004fd0

08002c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002c6a:	f7ff ffcd 	bl	8002c08 <HAL_RCC_GetHCLKFreq>
 8002c6e:	4601      	mov	r1, r0
 8002c70:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002c78:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002c7c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	fa92 f2a2 	rbit	r2, r2
 8002c84:	603a      	str	r2, [r7, #0]
  return result;
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	fab2 f282 	clz	r2, r2
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	40d3      	lsrs	r3, r2
 8002c90:	4a04      	ldr	r2, [pc, #16]	; (8002ca4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002c92:	5cd3      	ldrb	r3, [r2, r3]
 8002c94:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	08004fd0 	.word	0x08004fd0

08002ca8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b092      	sub	sp, #72	; 0x48
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 80d4 	beq.w	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ccc:	4b4e      	ldr	r3, [pc, #312]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10e      	bne.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cd8:	4b4b      	ldr	r3, [pc, #300]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	4a4a      	ldr	r2, [pc, #296]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce2:	61d3      	str	r3, [r2, #28]
 8002ce4:	4b48      	ldr	r3, [pc, #288]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf6:	4b45      	ldr	r3, [pc, #276]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d118      	bne.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d02:	4b42      	ldr	r3, [pc, #264]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a41      	ldr	r2, [pc, #260]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d0c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d0e:	f7fe fa95 	bl	800123c <HAL_GetTick>
 8002d12:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d14:	e008      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d16:	f7fe fa91 	bl	800123c <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b64      	cmp	r3, #100	; 0x64
 8002d22:	d901      	bls.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e169      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d28:	4b38      	ldr	r3, [pc, #224]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0f0      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d34:	4b34      	ldr	r3, [pc, #208]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 8084 	beq.w	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d07c      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d54:	4b2c      	ldr	r3, [pc, #176]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d66:	fa93 f3a3 	rbit	r3, r3
 8002d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d6e:	fab3 f383 	clz	r3, r3
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	461a      	mov	r2, r3
 8002d76:	4b26      	ldr	r3, [pc, #152]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d78:	4413      	add	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	2301      	movs	r3, #1
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8a:	fa93 f3a3 	rbit	r3, r3
 8002d8e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d92:	fab3 f383 	clz	r3, r3
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4b1d      	ldr	r3, [pc, #116]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	461a      	mov	r2, r3
 8002da2:	2300      	movs	r3, #0
 8002da4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002da6:	4a18      	ldr	r2, [pc, #96]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002daa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d04b      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db6:	f7fe fa41 	bl	800123c <HAL_GetTick>
 8002dba:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dbc:	e00a      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dbe:	f7fe fa3d 	bl	800123c <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e113      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dda:	fa93 f3a3 	rbit	r3, r3
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24
 8002de0:	2302      	movs	r3, #2
 8002de2:	623b      	str	r3, [r7, #32]
 8002de4:	6a3b      	ldr	r3, [r7, #32]
 8002de6:	fa93 f3a3 	rbit	r3, r3
 8002dea:	61fb      	str	r3, [r7, #28]
  return result;
 8002dec:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dee:	fab3 f383 	clz	r3, r3
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	095b      	lsrs	r3, r3, #5
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	f043 0302 	orr.w	r3, r3, #2
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d108      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002e02:	4b01      	ldr	r3, [pc, #4]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	e00d      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	40007000 	.word	0x40007000
 8002e10:	10908100 	.word	0x10908100
 8002e14:	2302      	movs	r3, #2
 8002e16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	fa93 f3a3 	rbit	r3, r3
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	4b78      	ldr	r3, [pc, #480]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	2202      	movs	r2, #2
 8002e26:	613a      	str	r2, [r7, #16]
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	fa92 f2a2 	rbit	r2, r2
 8002e2e:	60fa      	str	r2, [r7, #12]
  return result;
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	fab2 f282 	clz	r2, r2
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	f002 021f 	and.w	r2, r2, #31
 8002e42:	2101      	movs	r1, #1
 8002e44:	fa01 f202 	lsl.w	r2, r1, r2
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0b7      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002e4e:	4b6d      	ldr	r3, [pc, #436]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	496a      	ldr	r1, [pc, #424]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d105      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e68:	4b66      	ldr	r3, [pc, #408]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	4a65      	ldr	r2, [pc, #404]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e72:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d008      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e80:	4b60      	ldr	r3, [pc, #384]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e84:	f023 0203 	bic.w	r2, r3, #3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	495d      	ldr	r1, [pc, #372]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d008      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e9e:	4b59      	ldr	r3, [pc, #356]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	4956      	ldr	r1, [pc, #344]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d008      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ebc:	4b51      	ldr	r3, [pc, #324]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	494e      	ldr	r1, [pc, #312]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0320 	and.w	r3, r3, #32
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d008      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eda:	4b4a      	ldr	r3, [pc, #296]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	f023 0210 	bic.w	r2, r3, #16
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	4947      	ldr	r1, [pc, #284]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d008      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002ef8:	4b42      	ldr	r3, [pc, #264]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f04:	493f      	ldr	r1, [pc, #252]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d008      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f16:	4b3b      	ldr	r3, [pc, #236]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	f023 0220 	bic.w	r2, r3, #32
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	4938      	ldr	r1, [pc, #224]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0308 	and.w	r3, r3, #8
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d008      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f34:	4b33      	ldr	r3, [pc, #204]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	4930      	ldr	r1, [pc, #192]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0310 	and.w	r3, r3, #16
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d008      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f52:	4b2c      	ldr	r3, [pc, #176]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	4929      	ldr	r1, [pc, #164]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d008      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f70:	4b24      	ldr	r3, [pc, #144]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7c:	4921      	ldr	r1, [pc, #132]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d008      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f8e:	4b1d      	ldr	r3, [pc, #116]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f92:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	491a      	ldr	r1, [pc, #104]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002fac:	4b15      	ldr	r3, [pc, #84]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb8:	4912      	ldr	r1, [pc, #72]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d008      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002fca:	4b0e      	ldr	r3, [pc, #56]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	490b      	ldr	r1, [pc, #44]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d008      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002fe8:	4b06      	ldr	r3, [pc, #24]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff4:	4903      	ldr	r1, [pc, #12]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3748      	adds	r7, #72	; 0x48
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40021000 	.word	0x40021000

08003008 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e09d      	b.n	8003156 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	2b00      	cmp	r3, #0
 8003020:	d108      	bne.n	8003034 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800302a:	d009      	beq.n	8003040 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	61da      	str	r2, [r3, #28]
 8003032:	e005      	b.n	8003040 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d106      	bne.n	8003060 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7fd ff70 	bl	8000f40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2202      	movs	r2, #2
 8003064:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003076:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003080:	d902      	bls.n	8003088 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	e002      	b.n	800308e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800308c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003096:	d007      	beq.n	80030a8 <HAL_SPI_Init+0xa0>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030a0:	d002      	beq.n	80030a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80030b8:	431a      	orrs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	431a      	orrs	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ea:	ea42 0103 	orr.w	r1, r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	0c1b      	lsrs	r3, r3, #16
 8003104:	f003 0204 	and.w	r2, r3, #4
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	f003 0310 	and.w	r3, r3, #16
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003124:	ea42 0103 	orr.w	r1, r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	69da      	ldr	r2, [r3, #28]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003144:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b088      	sub	sp, #32
 8003162:	af00      	add	r7, sp, #0
 8003164:	60f8      	str	r0, [r7, #12]
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	603b      	str	r3, [r7, #0]
 800316a:	4613      	mov	r3, r2
 800316c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800316e:	2300      	movs	r3, #0
 8003170:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003178:	2b01      	cmp	r3, #1
 800317a:	d101      	bne.n	8003180 <HAL_SPI_Transmit+0x22>
 800317c:	2302      	movs	r3, #2
 800317e:	e158      	b.n	8003432 <HAL_SPI_Transmit+0x2d4>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003188:	f7fe f858 	bl	800123c <HAL_GetTick>
 800318c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800318e:	88fb      	ldrh	r3, [r7, #6]
 8003190:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b01      	cmp	r3, #1
 800319c:	d002      	beq.n	80031a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800319e:	2302      	movs	r3, #2
 80031a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031a2:	e13d      	b.n	8003420 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <HAL_SPI_Transmit+0x52>
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d102      	bne.n	80031b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031b4:	e134      	b.n	8003420 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2203      	movs	r2, #3
 80031ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	88fa      	ldrh	r2, [r7, #6]
 80031ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	88fa      	ldrh	r2, [r7, #6]
 80031d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003200:	d10f      	bne.n	8003222 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003210:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003220:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322c:	2b40      	cmp	r3, #64	; 0x40
 800322e:	d007      	beq.n	8003240 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800323e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003248:	d94b      	bls.n	80032e2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <HAL_SPI_Transmit+0xfa>
 8003252:	8afb      	ldrh	r3, [r7, #22]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d13e      	bne.n	80032d6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325c:	881a      	ldrh	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003268:	1c9a      	adds	r2, r3, #2
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003272:	b29b      	uxth	r3, r3
 8003274:	3b01      	subs	r3, #1
 8003276:	b29a      	uxth	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800327c:	e02b      	b.n	80032d6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b02      	cmp	r3, #2
 800328a:	d112      	bne.n	80032b2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003290:	881a      	ldrh	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329c:	1c9a      	adds	r2, r3, #2
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032b0:	e011      	b.n	80032d6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032b2:	f7fd ffc3 	bl	800123c <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d803      	bhi.n	80032ca <HAL_SPI_Transmit+0x16c>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032c8:	d102      	bne.n	80032d0 <HAL_SPI_Transmit+0x172>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d102      	bne.n	80032d6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032d4:	e0a4      	b.n	8003420 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032da:	b29b      	uxth	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1ce      	bne.n	800327e <HAL_SPI_Transmit+0x120>
 80032e0:	e07c      	b.n	80033dc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <HAL_SPI_Transmit+0x192>
 80032ea:	8afb      	ldrh	r3, [r7, #22]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d170      	bne.n	80033d2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d912      	bls.n	8003320 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fe:	881a      	ldrh	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330a:	1c9a      	adds	r2, r3, #2
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003314:	b29b      	uxth	r3, r3
 8003316:	3b02      	subs	r3, #2
 8003318:	b29a      	uxth	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800331e:	e058      	b.n	80033d2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	330c      	adds	r3, #12
 800332a:	7812      	ldrb	r2, [r2, #0]
 800332c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800333c:	b29b      	uxth	r3, r3
 800333e:	3b01      	subs	r3, #1
 8003340:	b29a      	uxth	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003346:	e044      	b.n	80033d2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b02      	cmp	r3, #2
 8003354:	d12b      	bne.n	80033ae <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800335a:	b29b      	uxth	r3, r3
 800335c:	2b01      	cmp	r3, #1
 800335e:	d912      	bls.n	8003386 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003364:	881a      	ldrh	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003370:	1c9a      	adds	r2, r3, #2
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800337a:	b29b      	uxth	r3, r3
 800337c:	3b02      	subs	r3, #2
 800337e:	b29a      	uxth	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003384:	e025      	b.n	80033d2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	330c      	adds	r3, #12
 8003390:	7812      	ldrb	r2, [r2, #0]
 8003392:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033ac:	e011      	b.n	80033d2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033ae:	f7fd ff45 	bl	800123c <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d803      	bhi.n	80033c6 <HAL_SPI_Transmit+0x268>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033c4:	d102      	bne.n	80033cc <HAL_SPI_Transmit+0x26e>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d102      	bne.n	80033d2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033d0:	e026      	b.n	8003420 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1b5      	bne.n	8003348 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	6839      	ldr	r1, [r7, #0]
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 fb5b 	bl	8003a9c <SPI_EndRxTxTransaction>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d002      	beq.n	80033f2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2220      	movs	r2, #32
 80033f0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10a      	bne.n	8003410 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033fa:	2300      	movs	r3, #0
 80033fc:	613b      	str	r3, [r7, #16]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	613b      	str	r3, [r7, #16]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	613b      	str	r3, [r7, #16]
 800340e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003414:	2b00      	cmp	r3, #0
 8003416:	d002      	beq.n	800341e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	77fb      	strb	r3, [r7, #31]
 800341c:	e000      	b.n	8003420 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800341e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003430:	7ffb      	ldrb	r3, [r7, #31]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3720      	adds	r7, #32
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b08a      	sub	sp, #40	; 0x28
 800343e:	af00      	add	r7, sp, #0
 8003440:	60f8      	str	r0, [r7, #12]
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	607a      	str	r2, [r7, #4]
 8003446:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003448:	2301      	movs	r3, #1
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800344c:	2300      	movs	r3, #0
 800344e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_SPI_TransmitReceive+0x26>
 800345c:	2302      	movs	r3, #2
 800345e:	e1fb      	b.n	8003858 <HAL_SPI_TransmitReceive+0x41e>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003468:	f7fd fee8 	bl	800123c <HAL_GetTick>
 800346c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003474:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800347c:	887b      	ldrh	r3, [r7, #2]
 800347e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003480:	887b      	ldrh	r3, [r7, #2]
 8003482:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003484:	7efb      	ldrb	r3, [r7, #27]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d00e      	beq.n	80034a8 <HAL_SPI_TransmitReceive+0x6e>
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003490:	d106      	bne.n	80034a0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d102      	bne.n	80034a0 <HAL_SPI_TransmitReceive+0x66>
 800349a:	7efb      	ldrb	r3, [r7, #27]
 800349c:	2b04      	cmp	r3, #4
 800349e:	d003      	beq.n	80034a8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80034a0:	2302      	movs	r3, #2
 80034a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80034a6:	e1cd      	b.n	8003844 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d005      	beq.n	80034ba <HAL_SPI_TransmitReceive+0x80>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <HAL_SPI_TransmitReceive+0x80>
 80034b4:	887b      	ldrh	r3, [r7, #2]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d103      	bne.n	80034c2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80034c0:	e1c0      	b.n	8003844 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d003      	beq.n	80034d6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2205      	movs	r2, #5
 80034d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	887a      	ldrh	r2, [r7, #2]
 80034e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	887a      	ldrh	r2, [r7, #2]
 80034ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	887a      	ldrh	r2, [r7, #2]
 80034fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	887a      	ldrh	r2, [r7, #2]
 8003502:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003518:	d802      	bhi.n	8003520 <HAL_SPI_TransmitReceive+0xe6>
 800351a:	8a3b      	ldrh	r3, [r7, #16]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d908      	bls.n	8003532 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800352e:	605a      	str	r2, [r3, #4]
 8003530:	e007      	b.n	8003542 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003540:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354c:	2b40      	cmp	r3, #64	; 0x40
 800354e:	d007      	beq.n	8003560 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800355e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003568:	d97c      	bls.n	8003664 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d002      	beq.n	8003578 <HAL_SPI_TransmitReceive+0x13e>
 8003572:	8a7b      	ldrh	r3, [r7, #18]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d169      	bne.n	800364c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357c:	881a      	ldrh	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003588:	1c9a      	adds	r2, r3, #2
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003592:	b29b      	uxth	r3, r3
 8003594:	3b01      	subs	r3, #1
 8003596:	b29a      	uxth	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800359c:	e056      	b.n	800364c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d11b      	bne.n	80035e4 <HAL_SPI_TransmitReceive+0x1aa>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d016      	beq.n	80035e4 <HAL_SPI_TransmitReceive+0x1aa>
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d113      	bne.n	80035e4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c0:	881a      	ldrh	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035cc:	1c9a      	adds	r2, r3, #2
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d11c      	bne.n	800362c <HAL_SPI_TransmitReceive+0x1f2>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d016      	beq.n	800362c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68da      	ldr	r2, [r3, #12]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	b292      	uxth	r2, r2
 800360a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	1c9a      	adds	r2, r3, #2
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800361c:	b29b      	uxth	r3, r3
 800361e:	3b01      	subs	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003628:	2301      	movs	r3, #1
 800362a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800362c:	f7fd fe06 	bl	800123c <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003638:	429a      	cmp	r2, r3
 800363a:	d807      	bhi.n	800364c <HAL_SPI_TransmitReceive+0x212>
 800363c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003642:	d003      	beq.n	800364c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800364a:	e0fb      	b.n	8003844 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003650:	b29b      	uxth	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1a3      	bne.n	800359e <HAL_SPI_TransmitReceive+0x164>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800365c:	b29b      	uxth	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d19d      	bne.n	800359e <HAL_SPI_TransmitReceive+0x164>
 8003662:	e0df      	b.n	8003824 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <HAL_SPI_TransmitReceive+0x23a>
 800366c:	8a7b      	ldrh	r3, [r7, #18]
 800366e:	2b01      	cmp	r3, #1
 8003670:	f040 80cb 	bne.w	800380a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003678:	b29b      	uxth	r3, r3
 800367a:	2b01      	cmp	r3, #1
 800367c:	d912      	bls.n	80036a4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003682:	881a      	ldrh	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368e:	1c9a      	adds	r2, r3, #2
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003698:	b29b      	uxth	r3, r3
 800369a:	3b02      	subs	r3, #2
 800369c:	b29a      	uxth	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036a2:	e0b2      	b.n	800380a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	330c      	adds	r3, #12
 80036ae:	7812      	ldrb	r2, [r2, #0]
 80036b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036ca:	e09e      	b.n	800380a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d134      	bne.n	8003744 <HAL_SPI_TransmitReceive+0x30a>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036de:	b29b      	uxth	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d02f      	beq.n	8003744 <HAL_SPI_TransmitReceive+0x30a>
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d12c      	bne.n	8003744 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d912      	bls.n	800371a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f8:	881a      	ldrh	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003704:	1c9a      	adds	r2, r3, #2
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800370e:	b29b      	uxth	r3, r3
 8003710:	3b02      	subs	r3, #2
 8003712:	b29a      	uxth	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003718:	e012      	b.n	8003740 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	330c      	adds	r3, #12
 8003724:	7812      	ldrb	r2, [r2, #0]
 8003726:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372c:	1c5a      	adds	r2, r3, #1
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003736:	b29b      	uxth	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b01      	cmp	r3, #1
 8003750:	d148      	bne.n	80037e4 <HAL_SPI_TransmitReceive+0x3aa>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003758:	b29b      	uxth	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d042      	beq.n	80037e4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003764:	b29b      	uxth	r3, r3
 8003766:	2b01      	cmp	r3, #1
 8003768:	d923      	bls.n	80037b2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	b292      	uxth	r2, r2
 8003776:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	1c9a      	adds	r2, r3, #2
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003788:	b29b      	uxth	r3, r3
 800378a:	3b02      	subs	r3, #2
 800378c:	b29a      	uxth	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800379a:	b29b      	uxth	r3, r3
 800379c:	2b01      	cmp	r3, #1
 800379e:	d81f      	bhi.n	80037e0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037ae:	605a      	str	r2, [r3, #4]
 80037b0:	e016      	b.n	80037e0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f103 020c 	add.w	r2, r3, #12
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	7812      	ldrb	r2, [r2, #0]
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037e0:	2301      	movs	r3, #1
 80037e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80037e4:	f7fd fd2a 	bl	800123c <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d803      	bhi.n	80037fc <HAL_SPI_TransmitReceive+0x3c2>
 80037f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037fa:	d102      	bne.n	8003802 <HAL_SPI_TransmitReceive+0x3c8>
 80037fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d103      	bne.n	800380a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003808:	e01c      	b.n	8003844 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800380e:	b29b      	uxth	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	f47f af5b 	bne.w	80036cc <HAL_SPI_TransmitReceive+0x292>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800381c:	b29b      	uxth	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	f47f af54 	bne.w	80036cc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003824:	69fa      	ldr	r2, [r7, #28]
 8003826:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 f937 	bl	8003a9c <SPI_EndRxTxTransaction>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d006      	beq.n	8003842 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2220      	movs	r2, #32
 800383e:	661a      	str	r2, [r3, #96]	; 0x60
 8003840:	e000      	b.n	8003844 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003842:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003854:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003858:	4618      	mov	r0, r3
 800385a:	3728      	adds	r7, #40	; 0x28
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	603b      	str	r3, [r7, #0]
 800386c:	4613      	mov	r3, r2
 800386e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003870:	f7fd fce4 	bl	800123c <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003878:	1a9b      	subs	r3, r3, r2
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	4413      	add	r3, r2
 800387e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003880:	f7fd fcdc 	bl	800123c <HAL_GetTick>
 8003884:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003886:	4b39      	ldr	r3, [pc, #228]	; (800396c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	015b      	lsls	r3, r3, #5
 800388c:	0d1b      	lsrs	r3, r3, #20
 800388e:	69fa      	ldr	r2, [r7, #28]
 8003890:	fb02 f303 	mul.w	r3, r2, r3
 8003894:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003896:	e054      	b.n	8003942 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800389e:	d050      	beq.n	8003942 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038a0:	f7fd fccc 	bl	800123c <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d902      	bls.n	80038b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d13d      	bne.n	8003932 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80038c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038ce:	d111      	bne.n	80038f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038d8:	d004      	beq.n	80038e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e2:	d107      	bne.n	80038f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038fc:	d10f      	bne.n	800391e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800391c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e017      	b.n	8003962 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003938:	2300      	movs	r3, #0
 800393a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	3b01      	subs	r3, #1
 8003940:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	4013      	ands	r3, r2
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	429a      	cmp	r2, r3
 8003950:	bf0c      	ite	eq
 8003952:	2301      	moveq	r3, #1
 8003954:	2300      	movne	r3, #0
 8003956:	b2db      	uxtb	r3, r3
 8003958:	461a      	mov	r2, r3
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	429a      	cmp	r2, r3
 800395e:	d19b      	bne.n	8003898 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3720      	adds	r7, #32
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20000004 	.word	0x20000004

08003970 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b08a      	sub	sp, #40	; 0x28
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800397e:	2300      	movs	r3, #0
 8003980:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003982:	f7fd fc5b 	bl	800123c <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398a:	1a9b      	subs	r3, r3, r2
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	4413      	add	r3, r2
 8003990:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003992:	f7fd fc53 	bl	800123c <HAL_GetTick>
 8003996:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	330c      	adds	r3, #12
 800399e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80039a0:	4b3d      	ldr	r3, [pc, #244]	; (8003a98 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	4613      	mov	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	00da      	lsls	r2, r3, #3
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	0d1b      	lsrs	r3, r3, #20
 80039b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b2:	fb02 f303 	mul.w	r3, r2, r3
 80039b6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80039b8:	e060      	b.n	8003a7c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80039c0:	d107      	bne.n	80039d2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d104      	bne.n	80039d2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80039d0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039d8:	d050      	beq.n	8003a7c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039da:	f7fd fc2f 	bl	800123c <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d902      	bls.n	80039f0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d13d      	bne.n	8003a6c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a08:	d111      	bne.n	8003a2e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a12:	d004      	beq.n	8003a1e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a1c:	d107      	bne.n	8003a2e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a2c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a36:	d10f      	bne.n	8003a58 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a56:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e010      	b.n	8003a8e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	4013      	ands	r3, r2
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d196      	bne.n	80039ba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3728      	adds	r7, #40	; 0x28
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	20000004 	.word	0x20000004

08003a9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af02      	add	r7, sp, #8
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f7ff ff5b 	bl	8003970 <SPI_WaitFifoStateUntilTimeout>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d007      	beq.n	8003ad0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac4:	f043 0220 	orr.w	r2, r3, #32
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e027      	b.n	8003b20 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	2180      	movs	r1, #128	; 0x80
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f7ff fec0 	bl	8003860 <SPI_WaitFlagStateUntilTimeout>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d007      	beq.n	8003af6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aea:	f043 0220 	orr.w	r2, r3, #32
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e014      	b.n	8003b20 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f7ff ff34 	bl	8003970 <SPI_WaitFifoStateUntilTimeout>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d007      	beq.n	8003b1e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b12:	f043 0220 	orr.w	r2, r3, #32
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e000      	b.n	8003b20 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e040      	b.n	8003bbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d106      	bne.n	8003b50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7fd fa3a 	bl	8000fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2224      	movs	r2, #36	; 0x24
 8003b54:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0201 	bic.w	r2, r2, #1
 8003b64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f82c 	bl	8003bc4 <UART_SetConfig>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d101      	bne.n	8003b76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e022      	b.n	8003bbc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d002      	beq.n	8003b84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f9f6 	bl	8003f70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ba2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0201 	orr.w	r2, r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 fa7d 	bl	80040b4 <UART_CheckIdleState>
 8003bba:	4603      	mov	r3, r0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b088      	sub	sp, #32
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003bf2:	f023 030c 	bic.w	r3, r3, #12
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6812      	ldr	r2, [r2, #0]
 8003bfa:	6979      	ldr	r1, [r7, #20]
 8003bfc:	430b      	orrs	r3, r1
 8003bfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4aa8      	ldr	r2, [pc, #672]	; (8003ee0 <UART_SetConfig+0x31c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d120      	bne.n	8003c86 <UART_SetConfig+0xc2>
 8003c44:	4ba7      	ldr	r3, [pc, #668]	; (8003ee4 <UART_SetConfig+0x320>)
 8003c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c48:	f003 0303 	and.w	r3, r3, #3
 8003c4c:	2b03      	cmp	r3, #3
 8003c4e:	d817      	bhi.n	8003c80 <UART_SetConfig+0xbc>
 8003c50:	a201      	add	r2, pc, #4	; (adr r2, 8003c58 <UART_SetConfig+0x94>)
 8003c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c56:	bf00      	nop
 8003c58:	08003c69 	.word	0x08003c69
 8003c5c:	08003c75 	.word	0x08003c75
 8003c60:	08003c7b 	.word	0x08003c7b
 8003c64:	08003c6f 	.word	0x08003c6f
 8003c68:	2301      	movs	r3, #1
 8003c6a:	77fb      	strb	r3, [r7, #31]
 8003c6c:	e0b5      	b.n	8003dda <UART_SetConfig+0x216>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	77fb      	strb	r3, [r7, #31]
 8003c72:	e0b2      	b.n	8003dda <UART_SetConfig+0x216>
 8003c74:	2304      	movs	r3, #4
 8003c76:	77fb      	strb	r3, [r7, #31]
 8003c78:	e0af      	b.n	8003dda <UART_SetConfig+0x216>
 8003c7a:	2308      	movs	r3, #8
 8003c7c:	77fb      	strb	r3, [r7, #31]
 8003c7e:	e0ac      	b.n	8003dda <UART_SetConfig+0x216>
 8003c80:	2310      	movs	r3, #16
 8003c82:	77fb      	strb	r3, [r7, #31]
 8003c84:	e0a9      	b.n	8003dda <UART_SetConfig+0x216>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a97      	ldr	r2, [pc, #604]	; (8003ee8 <UART_SetConfig+0x324>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d124      	bne.n	8003cda <UART_SetConfig+0x116>
 8003c90:	4b94      	ldr	r3, [pc, #592]	; (8003ee4 <UART_SetConfig+0x320>)
 8003c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c9c:	d011      	beq.n	8003cc2 <UART_SetConfig+0xfe>
 8003c9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ca2:	d817      	bhi.n	8003cd4 <UART_SetConfig+0x110>
 8003ca4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ca8:	d011      	beq.n	8003cce <UART_SetConfig+0x10a>
 8003caa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cae:	d811      	bhi.n	8003cd4 <UART_SetConfig+0x110>
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <UART_SetConfig+0xf8>
 8003cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb8:	d006      	beq.n	8003cc8 <UART_SetConfig+0x104>
 8003cba:	e00b      	b.n	8003cd4 <UART_SetConfig+0x110>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	77fb      	strb	r3, [r7, #31]
 8003cc0:	e08b      	b.n	8003dda <UART_SetConfig+0x216>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	77fb      	strb	r3, [r7, #31]
 8003cc6:	e088      	b.n	8003dda <UART_SetConfig+0x216>
 8003cc8:	2304      	movs	r3, #4
 8003cca:	77fb      	strb	r3, [r7, #31]
 8003ccc:	e085      	b.n	8003dda <UART_SetConfig+0x216>
 8003cce:	2308      	movs	r3, #8
 8003cd0:	77fb      	strb	r3, [r7, #31]
 8003cd2:	e082      	b.n	8003dda <UART_SetConfig+0x216>
 8003cd4:	2310      	movs	r3, #16
 8003cd6:	77fb      	strb	r3, [r7, #31]
 8003cd8:	e07f      	b.n	8003dda <UART_SetConfig+0x216>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a83      	ldr	r2, [pc, #524]	; (8003eec <UART_SetConfig+0x328>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d124      	bne.n	8003d2e <UART_SetConfig+0x16a>
 8003ce4:	4b7f      	ldr	r3, [pc, #508]	; (8003ee4 <UART_SetConfig+0x320>)
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003cec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003cf0:	d011      	beq.n	8003d16 <UART_SetConfig+0x152>
 8003cf2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003cf6:	d817      	bhi.n	8003d28 <UART_SetConfig+0x164>
 8003cf8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003cfc:	d011      	beq.n	8003d22 <UART_SetConfig+0x15e>
 8003cfe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d02:	d811      	bhi.n	8003d28 <UART_SetConfig+0x164>
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <UART_SetConfig+0x14c>
 8003d08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d0c:	d006      	beq.n	8003d1c <UART_SetConfig+0x158>
 8003d0e:	e00b      	b.n	8003d28 <UART_SetConfig+0x164>
 8003d10:	2300      	movs	r3, #0
 8003d12:	77fb      	strb	r3, [r7, #31]
 8003d14:	e061      	b.n	8003dda <UART_SetConfig+0x216>
 8003d16:	2302      	movs	r3, #2
 8003d18:	77fb      	strb	r3, [r7, #31]
 8003d1a:	e05e      	b.n	8003dda <UART_SetConfig+0x216>
 8003d1c:	2304      	movs	r3, #4
 8003d1e:	77fb      	strb	r3, [r7, #31]
 8003d20:	e05b      	b.n	8003dda <UART_SetConfig+0x216>
 8003d22:	2308      	movs	r3, #8
 8003d24:	77fb      	strb	r3, [r7, #31]
 8003d26:	e058      	b.n	8003dda <UART_SetConfig+0x216>
 8003d28:	2310      	movs	r3, #16
 8003d2a:	77fb      	strb	r3, [r7, #31]
 8003d2c:	e055      	b.n	8003dda <UART_SetConfig+0x216>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a6f      	ldr	r2, [pc, #444]	; (8003ef0 <UART_SetConfig+0x32c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d124      	bne.n	8003d82 <UART_SetConfig+0x1be>
 8003d38:	4b6a      	ldr	r3, [pc, #424]	; (8003ee4 <UART_SetConfig+0x320>)
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003d40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d44:	d011      	beq.n	8003d6a <UART_SetConfig+0x1a6>
 8003d46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d4a:	d817      	bhi.n	8003d7c <UART_SetConfig+0x1b8>
 8003d4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d50:	d011      	beq.n	8003d76 <UART_SetConfig+0x1b2>
 8003d52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d56:	d811      	bhi.n	8003d7c <UART_SetConfig+0x1b8>
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <UART_SetConfig+0x1a0>
 8003d5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d60:	d006      	beq.n	8003d70 <UART_SetConfig+0x1ac>
 8003d62:	e00b      	b.n	8003d7c <UART_SetConfig+0x1b8>
 8003d64:	2300      	movs	r3, #0
 8003d66:	77fb      	strb	r3, [r7, #31]
 8003d68:	e037      	b.n	8003dda <UART_SetConfig+0x216>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	77fb      	strb	r3, [r7, #31]
 8003d6e:	e034      	b.n	8003dda <UART_SetConfig+0x216>
 8003d70:	2304      	movs	r3, #4
 8003d72:	77fb      	strb	r3, [r7, #31]
 8003d74:	e031      	b.n	8003dda <UART_SetConfig+0x216>
 8003d76:	2308      	movs	r3, #8
 8003d78:	77fb      	strb	r3, [r7, #31]
 8003d7a:	e02e      	b.n	8003dda <UART_SetConfig+0x216>
 8003d7c:	2310      	movs	r3, #16
 8003d7e:	77fb      	strb	r3, [r7, #31]
 8003d80:	e02b      	b.n	8003dda <UART_SetConfig+0x216>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a5b      	ldr	r2, [pc, #364]	; (8003ef4 <UART_SetConfig+0x330>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d124      	bne.n	8003dd6 <UART_SetConfig+0x212>
 8003d8c:	4b55      	ldr	r3, [pc, #340]	; (8003ee4 <UART_SetConfig+0x320>)
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003d94:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d98:	d011      	beq.n	8003dbe <UART_SetConfig+0x1fa>
 8003d9a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d9e:	d817      	bhi.n	8003dd0 <UART_SetConfig+0x20c>
 8003da0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003da4:	d011      	beq.n	8003dca <UART_SetConfig+0x206>
 8003da6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003daa:	d811      	bhi.n	8003dd0 <UART_SetConfig+0x20c>
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <UART_SetConfig+0x1f4>
 8003db0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003db4:	d006      	beq.n	8003dc4 <UART_SetConfig+0x200>
 8003db6:	e00b      	b.n	8003dd0 <UART_SetConfig+0x20c>
 8003db8:	2300      	movs	r3, #0
 8003dba:	77fb      	strb	r3, [r7, #31]
 8003dbc:	e00d      	b.n	8003dda <UART_SetConfig+0x216>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	77fb      	strb	r3, [r7, #31]
 8003dc2:	e00a      	b.n	8003dda <UART_SetConfig+0x216>
 8003dc4:	2304      	movs	r3, #4
 8003dc6:	77fb      	strb	r3, [r7, #31]
 8003dc8:	e007      	b.n	8003dda <UART_SetConfig+0x216>
 8003dca:	2308      	movs	r3, #8
 8003dcc:	77fb      	strb	r3, [r7, #31]
 8003dce:	e004      	b.n	8003dda <UART_SetConfig+0x216>
 8003dd0:	2310      	movs	r3, #16
 8003dd2:	77fb      	strb	r3, [r7, #31]
 8003dd4:	e001      	b.n	8003dda <UART_SetConfig+0x216>
 8003dd6:	2310      	movs	r3, #16
 8003dd8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003de2:	d15c      	bne.n	8003e9e <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8003de4:	7ffb      	ldrb	r3, [r7, #31]
 8003de6:	2b08      	cmp	r3, #8
 8003de8:	d827      	bhi.n	8003e3a <UART_SetConfig+0x276>
 8003dea:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <UART_SetConfig+0x22c>)
 8003dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df0:	08003e15 	.word	0x08003e15
 8003df4:	08003e1d 	.word	0x08003e1d
 8003df8:	08003e25 	.word	0x08003e25
 8003dfc:	08003e3b 	.word	0x08003e3b
 8003e00:	08003e2b 	.word	0x08003e2b
 8003e04:	08003e3b 	.word	0x08003e3b
 8003e08:	08003e3b 	.word	0x08003e3b
 8003e0c:	08003e3b 	.word	0x08003e3b
 8003e10:	08003e33 	.word	0x08003e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e14:	f7fe ff04 	bl	8002c20 <HAL_RCC_GetPCLK1Freq>
 8003e18:	61b8      	str	r0, [r7, #24]
        break;
 8003e1a:	e013      	b.n	8003e44 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e1c:	f7fe ff22 	bl	8002c64 <HAL_RCC_GetPCLK2Freq>
 8003e20:	61b8      	str	r0, [r7, #24]
        break;
 8003e22:	e00f      	b.n	8003e44 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e24:	4b34      	ldr	r3, [pc, #208]	; (8003ef8 <UART_SetConfig+0x334>)
 8003e26:	61bb      	str	r3, [r7, #24]
        break;
 8003e28:	e00c      	b.n	8003e44 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e2a:	f7fe fe83 	bl	8002b34 <HAL_RCC_GetSysClockFreq>
 8003e2e:	61b8      	str	r0, [r7, #24]
        break;
 8003e30:	e008      	b.n	8003e44 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e36:	61bb      	str	r3, [r7, #24]
        break;
 8003e38:	e004      	b.n	8003e44 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	77bb      	strb	r3, [r7, #30]
        break;
 8003e42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 8084 	beq.w	8003f54 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	005a      	lsls	r2, r3, #1
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	085b      	lsrs	r3, r3, #1
 8003e56:	441a      	add	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	2b0f      	cmp	r3, #15
 8003e68:	d916      	bls.n	8003e98 <UART_SetConfig+0x2d4>
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e70:	d212      	bcs.n	8003e98 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	f023 030f 	bic.w	r3, r3, #15
 8003e7a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	085b      	lsrs	r3, r3, #1
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	89fb      	ldrh	r3, [r7, #14]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	89fa      	ldrh	r2, [r7, #14]
 8003e94:	60da      	str	r2, [r3, #12]
 8003e96:	e05d      	b.n	8003f54 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	77bb      	strb	r3, [r7, #30]
 8003e9c:	e05a      	b.n	8003f54 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e9e:	7ffb      	ldrb	r3, [r7, #31]
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d836      	bhi.n	8003f12 <UART_SetConfig+0x34e>
 8003ea4:	a201      	add	r2, pc, #4	; (adr r2, 8003eac <UART_SetConfig+0x2e8>)
 8003ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eaa:	bf00      	nop
 8003eac:	08003ed1 	.word	0x08003ed1
 8003eb0:	08003ed9 	.word	0x08003ed9
 8003eb4:	08003efd 	.word	0x08003efd
 8003eb8:	08003f13 	.word	0x08003f13
 8003ebc:	08003f03 	.word	0x08003f03
 8003ec0:	08003f13 	.word	0x08003f13
 8003ec4:	08003f13 	.word	0x08003f13
 8003ec8:	08003f13 	.word	0x08003f13
 8003ecc:	08003f0b 	.word	0x08003f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ed0:	f7fe fea6 	bl	8002c20 <HAL_RCC_GetPCLK1Freq>
 8003ed4:	61b8      	str	r0, [r7, #24]
        break;
 8003ed6:	e021      	b.n	8003f1c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ed8:	f7fe fec4 	bl	8002c64 <HAL_RCC_GetPCLK2Freq>
 8003edc:	61b8      	str	r0, [r7, #24]
        break;
 8003ede:	e01d      	b.n	8003f1c <UART_SetConfig+0x358>
 8003ee0:	40013800 	.word	0x40013800
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	40004400 	.word	0x40004400
 8003eec:	40004800 	.word	0x40004800
 8003ef0:	40004c00 	.word	0x40004c00
 8003ef4:	40005000 	.word	0x40005000
 8003ef8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003efc:	4b1b      	ldr	r3, [pc, #108]	; (8003f6c <UART_SetConfig+0x3a8>)
 8003efe:	61bb      	str	r3, [r7, #24]
        break;
 8003f00:	e00c      	b.n	8003f1c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f02:	f7fe fe17 	bl	8002b34 <HAL_RCC_GetSysClockFreq>
 8003f06:	61b8      	str	r0, [r7, #24]
        break;
 8003f08:	e008      	b.n	8003f1c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f0e:	61bb      	str	r3, [r7, #24]
        break;
 8003f10:	e004      	b.n	8003f1c <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	77bb      	strb	r3, [r7, #30]
        break;
 8003f1a:	bf00      	nop
    }

    if (pclk != 0U)
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d018      	beq.n	8003f54 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	085a      	lsrs	r2, r3, #1
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	441a      	add	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	2b0f      	cmp	r3, #15
 8003f3c:	d908      	bls.n	8003f50 <UART_SetConfig+0x38c>
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f44:	d204      	bcs.n	8003f50 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	60da      	str	r2, [r3, #12]
 8003f4e:	e001      	b.n	8003f54 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003f60:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3720      	adds	r7, #32
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	007a1200 	.word	0x007a1200

08003f70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	f003 0310 	and.w	r3, r3, #16
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00a      	beq.n	8004022 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	f003 0320 	and.w	r3, r3, #32
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00a      	beq.n	8004044 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404c:	2b00      	cmp	r3, #0
 800404e:	d01a      	beq.n	8004086 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800406e:	d10a      	bne.n	8004086 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00a      	beq.n	80040a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	605a      	str	r2, [r3, #4]
  }
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af02      	add	r7, sp, #8
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040c4:	f7fd f8ba 	bl	800123c <HAL_GetTick>
 80040c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0308 	and.w	r3, r3, #8
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d10e      	bne.n	80040f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f82d 	bl	8004146 <UART_WaitOnFlagUntilTimeout>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e023      	b.n	800413e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b04      	cmp	r3, #4
 8004102:	d10e      	bne.n	8004122 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004104:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f817 	bl	8004146 <UART_WaitOnFlagUntilTimeout>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e00d      	b.n	800413e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2220      	movs	r2, #32
 8004126:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2220      	movs	r2, #32
 800412c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b09c      	sub	sp, #112	; 0x70
 800414a:	af00      	add	r7, sp, #0
 800414c:	60f8      	str	r0, [r7, #12]
 800414e:	60b9      	str	r1, [r7, #8]
 8004150:	603b      	str	r3, [r7, #0]
 8004152:	4613      	mov	r3, r2
 8004154:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004156:	e0a5      	b.n	80042a4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004158:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800415a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800415e:	f000 80a1 	beq.w	80042a4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004162:	f7fd f86b 	bl	800123c <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800416e:	429a      	cmp	r2, r3
 8004170:	d302      	bcc.n	8004178 <UART_WaitOnFlagUntilTimeout+0x32>
 8004172:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004174:	2b00      	cmp	r3, #0
 8004176:	d13e      	bne.n	80041f6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004180:	e853 3f00 	ldrex	r3, [r3]
 8004184:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004188:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800418c:	667b      	str	r3, [r7, #100]	; 0x64
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	461a      	mov	r2, r3
 8004194:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004196:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004198:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800419c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800419e:	e841 2300 	strex	r3, r2, [r1]
 80041a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80041a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1e6      	bne.n	8004178 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3308      	adds	r3, #8
 80041b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b4:	e853 3f00 	ldrex	r3, [r3]
 80041b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041bc:	f023 0301 	bic.w	r3, r3, #1
 80041c0:	663b      	str	r3, [r7, #96]	; 0x60
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	3308      	adds	r3, #8
 80041c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80041cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041d2:	e841 2300 	strex	r3, r2, [r1]
 80041d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80041d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1e5      	bne.n	80041aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2220      	movs	r2, #32
 80041e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2220      	movs	r2, #32
 80041e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e067      	b.n	80042c6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b00      	cmp	r3, #0
 8004202:	d04f      	beq.n	80042a4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800420e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004212:	d147      	bne.n	80042a4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800421c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004226:	e853 3f00 	ldrex	r3, [r3]
 800422a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004232:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	461a      	mov	r2, r3
 800423a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800423c:	637b      	str	r3, [r7, #52]	; 0x34
 800423e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004240:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004242:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004244:	e841 2300 	strex	r3, r2, [r1]
 8004248:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800424a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1e6      	bne.n	800421e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	3308      	adds	r3, #8
 8004256:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	e853 3f00 	ldrex	r3, [r3]
 800425e:	613b      	str	r3, [r7, #16]
   return(result);
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f023 0301 	bic.w	r3, r3, #1
 8004266:	66bb      	str	r3, [r7, #104]	; 0x68
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	3308      	adds	r3, #8
 800426e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004270:	623a      	str	r2, [r7, #32]
 8004272:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004274:	69f9      	ldr	r1, [r7, #28]
 8004276:	6a3a      	ldr	r2, [r7, #32]
 8004278:	e841 2300 	strex	r3, r2, [r1]
 800427c:	61bb      	str	r3, [r7, #24]
   return(result);
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1e5      	bne.n	8004250 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2220      	movs	r2, #32
 8004288:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2220      	movs	r2, #32
 800428e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2220      	movs	r2, #32
 8004294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e010      	b.n	80042c6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	69da      	ldr	r2, [r3, #28]
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	4013      	ands	r3, r2
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	bf0c      	ite	eq
 80042b4:	2301      	moveq	r3, #1
 80042b6:	2300      	movne	r3, #0
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	461a      	mov	r2, r3
 80042bc:	79fb      	ldrb	r3, [r7, #7]
 80042be:	429a      	cmp	r2, r3
 80042c0:	f43f af4a 	beq.w	8004158 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3770      	adds	r7, #112	; 0x70
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
	...

080042d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80042d4:	4904      	ldr	r1, [pc, #16]	; (80042e8 <MX_FATFS_Init+0x18>)
 80042d6:	4805      	ldr	r0, [pc, #20]	; (80042ec <MX_FATFS_Init+0x1c>)
 80042d8:	f000 fe28 	bl	8004f2c <FATFS_LinkDriver>
 80042dc:	4603      	mov	r3, r0
 80042de:	461a      	mov	r2, r3
 80042e0:	4b03      	ldr	r3, [pc, #12]	; (80042f0 <MX_FATFS_Init+0x20>)
 80042e2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80042e4:	bf00      	nop
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	2000013c 	.word	0x2000013c
 80042ec:	20000010 	.word	0x20000010
 80042f0:	20000138 	.word	0x20000138

080042f4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	4603      	mov	r3, r0
 80042fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 80042fe:	79fb      	ldrb	r3, [r7, #7]
 8004300:	4618      	mov	r0, r3
 8004302:	f7fc f915 	bl	8000530 <SD_disk_initialize>
 8004306:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004308:	4618      	mov	r0, r3
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	4603      	mov	r3, r0
 8004318:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 800431a:	79fb      	ldrb	r3, [r7, #7]
 800431c:	4618      	mov	r0, r3
 800431e:	f7fc f9f3 	bl	8000708 <SD_disk_status>
 8004322:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004324:	4618      	mov	r0, r3
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	60b9      	str	r1, [r7, #8]
 8004334:	607a      	str	r2, [r7, #4]
 8004336:	603b      	str	r3, [r7, #0]
 8004338:	4603      	mov	r3, r0
 800433a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 800433c:	7bf8      	ldrb	r0, [r7, #15]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	68b9      	ldr	r1, [r7, #8]
 8004344:	f7fc f9f6 	bl	8000734 <SD_disk_read>
 8004348:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800434a:	4618      	mov	r0, r3
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b084      	sub	sp, #16
 8004356:	af00      	add	r7, sp, #0
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
 800435c:	603b      	str	r3, [r7, #0]
 800435e:	4603      	mov	r3, r0
 8004360:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8004362:	7bf8      	ldrb	r0, [r7, #15]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	68b9      	ldr	r1, [r7, #8]
 800436a:	f7fc fa4d 	bl	8000808 <SD_disk_write>
 800436e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	4603      	mov	r3, r0
 8004380:	603a      	str	r2, [r7, #0]
 8004382:	71fb      	strb	r3, [r7, #7]
 8004384:	460b      	mov	r3, r1
 8004386:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8004388:	79b9      	ldrb	r1, [r7, #6]
 800438a:	79fb      	ldrb	r3, [r7, #7]
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	4618      	mov	r0, r3
 8004390:	f7fc fabe 	bl	8000910 <SD_disk_ioctl>
 8004394:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004396:	4618      	mov	r0, r3
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	4603      	mov	r3, r0
 80043a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	4a08      	ldr	r2, [pc, #32]	; (80043d0 <disk_status+0x30>)
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	79fa      	ldrb	r2, [r7, #7]
 80043b8:	4905      	ldr	r1, [pc, #20]	; (80043d0 <disk_status+0x30>)
 80043ba:	440a      	add	r2, r1
 80043bc:	7a12      	ldrb	r2, [r2, #8]
 80043be:	4610      	mov	r0, r2
 80043c0:	4798      	blx	r3
 80043c2:	4603      	mov	r3, r0
 80043c4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80043c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	20000160 	.word	0x20000160

080043d4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4603      	mov	r3, r0
 80043dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80043e2:	79fb      	ldrb	r3, [r7, #7]
 80043e4:	4a0d      	ldr	r2, [pc, #52]	; (800441c <disk_initialize+0x48>)
 80043e6:	5cd3      	ldrb	r3, [r2, r3]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d111      	bne.n	8004410 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80043ec:	79fb      	ldrb	r3, [r7, #7]
 80043ee:	4a0b      	ldr	r2, [pc, #44]	; (800441c <disk_initialize+0x48>)
 80043f0:	2101      	movs	r1, #1
 80043f2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	4a09      	ldr	r2, [pc, #36]	; (800441c <disk_initialize+0x48>)
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	79fa      	ldrb	r2, [r7, #7]
 8004402:	4906      	ldr	r1, [pc, #24]	; (800441c <disk_initialize+0x48>)
 8004404:	440a      	add	r2, r1
 8004406:	7a12      	ldrb	r2, [r2, #8]
 8004408:	4610      	mov	r0, r2
 800440a:	4798      	blx	r3
 800440c:	4603      	mov	r3, r0
 800440e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004410:	7bfb      	ldrb	r3, [r7, #15]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	20000160 	.word	0x20000160

08004420 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004420:	b590      	push	{r4, r7, lr}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	607a      	str	r2, [r7, #4]
 800442a:	603b      	str	r3, [r7, #0]
 800442c:	4603      	mov	r3, r0
 800442e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004430:	7bfb      	ldrb	r3, [r7, #15]
 8004432:	4a0a      	ldr	r2, [pc, #40]	; (800445c <disk_read+0x3c>)
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4413      	add	r3, r2
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	689c      	ldr	r4, [r3, #8]
 800443c:	7bfb      	ldrb	r3, [r7, #15]
 800443e:	4a07      	ldr	r2, [pc, #28]	; (800445c <disk_read+0x3c>)
 8004440:	4413      	add	r3, r2
 8004442:	7a18      	ldrb	r0, [r3, #8]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	68b9      	ldr	r1, [r7, #8]
 800444a:	47a0      	blx	r4
 800444c:	4603      	mov	r3, r0
 800444e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004450:	7dfb      	ldrb	r3, [r7, #23]
}
 8004452:	4618      	mov	r0, r3
 8004454:	371c      	adds	r7, #28
 8004456:	46bd      	mov	sp, r7
 8004458:	bd90      	pop	{r4, r7, pc}
 800445a:	bf00      	nop
 800445c:	20000160 	.word	0x20000160

08004460 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004460:	b590      	push	{r4, r7, lr}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	60b9      	str	r1, [r7, #8]
 8004468:	607a      	str	r2, [r7, #4]
 800446a:	603b      	str	r3, [r7, #0]
 800446c:	4603      	mov	r3, r0
 800446e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004470:	7bfb      	ldrb	r3, [r7, #15]
 8004472:	4a0a      	ldr	r2, [pc, #40]	; (800449c <disk_write+0x3c>)
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	68dc      	ldr	r4, [r3, #12]
 800447c:	7bfb      	ldrb	r3, [r7, #15]
 800447e:	4a07      	ldr	r2, [pc, #28]	; (800449c <disk_write+0x3c>)
 8004480:	4413      	add	r3, r2
 8004482:	7a18      	ldrb	r0, [r3, #8]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	68b9      	ldr	r1, [r7, #8]
 800448a:	47a0      	blx	r4
 800448c:	4603      	mov	r3, r0
 800448e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004490:	7dfb      	ldrb	r3, [r7, #23]
}
 8004492:	4618      	mov	r0, r3
 8004494:	371c      	adds	r7, #28
 8004496:	46bd      	mov	sp, r7
 8004498:	bd90      	pop	{r4, r7, pc}
 800449a:	bf00      	nop
 800449c:	20000160 	.word	0x20000160

080044a0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	4603      	mov	r3, r0
 80044a8:	603a      	str	r2, [r7, #0]
 80044aa:	71fb      	strb	r3, [r7, #7]
 80044ac:	460b      	mov	r3, r1
 80044ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80044b0:	79fb      	ldrb	r3, [r7, #7]
 80044b2:	4a09      	ldr	r2, [pc, #36]	; (80044d8 <disk_ioctl+0x38>)
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	79fa      	ldrb	r2, [r7, #7]
 80044be:	4906      	ldr	r1, [pc, #24]	; (80044d8 <disk_ioctl+0x38>)
 80044c0:	440a      	add	r2, r1
 80044c2:	7a10      	ldrb	r0, [r2, #8]
 80044c4:	79b9      	ldrb	r1, [r7, #6]
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	4798      	blx	r3
 80044ca:	4603      	mov	r3, r0
 80044cc:	73fb      	strb	r3, [r7, #15]
  return res;
 80044ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	20000160 	.word	0x20000160

080044dc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80044e4:	2300      	movs	r3, #0
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	e016      	b.n	8004518 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80044ea:	4910      	ldr	r1, [pc, #64]	; (800452c <clear_lock+0x50>)
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	4613      	mov	r3, r2
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	4413      	add	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	440b      	add	r3, r1
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d108      	bne.n	8004512 <clear_lock+0x36>
 8004500:	490a      	ldr	r1, [pc, #40]	; (800452c <clear_lock+0x50>)
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	4613      	mov	r3, r2
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	4413      	add	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	440b      	add	r3, r1
 800450e:	2200      	movs	r2, #0
 8004510:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	3301      	adds	r3, #1
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d9e5      	bls.n	80044ea <clear_lock+0xe>
	}
}
 800451e:	bf00      	nop
 8004520:	bf00      	nop
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	20000148 	.word	0x20000148

08004530 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004538:	2300      	movs	r3, #0
 800453a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004542:	791b      	ldrb	r3, [r3, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d040      	beq.n	80045ca <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004558:	7858      	ldrb	r0, [r3, #1]
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	2301      	movs	r3, #1
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	f7ff ff7e 	bl	8004460 <disk_write>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d002      	beq.n	8004570 <sync_window+0x40>
			res = FR_DISK_ERR;
 800456a:	2301      	movs	r3, #1
 800456c:	73fb      	strb	r3, [r7, #15]
 800456e:	e02c      	b.n	80045ca <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004576:	2200      	movs	r2, #0
 8004578:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	1ad2      	subs	r2, r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	429a      	cmp	r2, r3
 8004590:	d21b      	bcs.n	80045ca <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004598:	78db      	ldrb	r3, [r3, #3]
 800459a:	613b      	str	r3, [r7, #16]
 800459c:	e012      	b.n	80045c4 <sync_window+0x94>
					wsect += fs->fsize;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4413      	add	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045b2:	7858      	ldrb	r0, [r3, #1]
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	2301      	movs	r3, #1
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	f7ff ff51 	bl	8004460 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	3b01      	subs	r3, #1
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d8e9      	bhi.n	800459e <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 80045ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80045de:	2300      	movs	r3, #0
 80045e0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d01e      	beq.n	800462e <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7ff ff9d 	bl	8004530 <sync_window>
 80045f6:	4603      	mov	r3, r0
 80045f8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d116      	bne.n	800462e <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004606:	7858      	ldrb	r0, [r3, #1]
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	2301      	movs	r3, #1
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	f7ff ff07 	bl	8004420 <disk_read>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d004      	beq.n	8004622 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004618:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800461c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800461e:	2301      	movs	r3, #1
 8004620:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004628:	461a      	mov	r2, r3
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 800462e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004638:	b480      	push	{r7}
 800463a:	b087      	sub	sp, #28
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004644:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d031      	beq.n	80046b2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	617b      	str	r3, [r7, #20]
 8004654:	e002      	b.n	800465c <get_ldnumber+0x24>
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	3301      	adds	r3, #1
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	2b1f      	cmp	r3, #31
 8004662:	d903      	bls.n	800466c <get_ldnumber+0x34>
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	2b3a      	cmp	r3, #58	; 0x3a
 800466a:	d1f4      	bne.n	8004656 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2b3a      	cmp	r3, #58	; 0x3a
 8004672:	d11c      	bne.n	80046ae <get_ldnumber+0x76>
			tp = *path;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	60fa      	str	r2, [r7, #12]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	3b30      	subs	r3, #48	; 0x30
 8004684:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2b09      	cmp	r3, #9
 800468a:	d80e      	bhi.n	80046aa <get_ldnumber+0x72>
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	429a      	cmp	r2, r3
 8004692:	d10a      	bne.n	80046aa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d107      	bne.n	80046aa <get_ldnumber+0x72>
					vol = (int)i;
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	3301      	adds	r3, #1
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	e002      	b.n	80046b4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80046ae:	2300      	movs	r3, #0
 80046b0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80046b2:	693b      	ldr	r3, [r7, #16]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	371c      	adds	r7, #28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d0:	2200      	movs	r2, #0
 80046d2:	711a      	strb	r2, [r3, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046da:	461a      	mov	r2, r3
 80046dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046e0:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80046e2:	6839      	ldr	r1, [r7, #0]
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7ff ff75 	bl	80045d4 <move_window>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <check_fs+0x34>
		return 3;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e04a      	b.n	800478a <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80046fa:	3301      	adds	r3, #1
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	021b      	lsls	r3, r3, #8
 8004700:	b21a      	sxth	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8004708:	b21b      	sxth	r3, r3
 800470a:	4313      	orrs	r3, r2
 800470c:	b21b      	sxth	r3, r3
 800470e:	4a21      	ldr	r2, [pc, #132]	; (8004794 <check_fs+0xd4>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d001      	beq.n	8004718 <check_fs+0x58>
		return 2;
 8004714:	2302      	movs	r3, #2
 8004716:	e038      	b.n	800478a <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3336      	adds	r3, #54	; 0x36
 800471c:	3303      	adds	r3, #3
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	061a      	lsls	r2, r3, #24
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	3336      	adds	r3, #54	; 0x36
 8004726:	3302      	adds	r3, #2
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	041b      	lsls	r3, r3, #16
 800472c:	4313      	orrs	r3, r2
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	3236      	adds	r2, #54	; 0x36
 8004732:	3201      	adds	r2, #1
 8004734:	7812      	ldrb	r2, [r2, #0]
 8004736:	0212      	lsls	r2, r2, #8
 8004738:	4313      	orrs	r3, r2
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8004740:	4313      	orrs	r3, r2
 8004742:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004746:	4a14      	ldr	r2, [pc, #80]	; (8004798 <check_fs+0xd8>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d101      	bne.n	8004750 <check_fs+0x90>
		return 0;
 800474c:	2300      	movs	r3, #0
 800474e:	e01c      	b.n	800478a <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3352      	adds	r3, #82	; 0x52
 8004754:	3303      	adds	r3, #3
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	061a      	lsls	r2, r3, #24
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3352      	adds	r3, #82	; 0x52
 800475e:	3302      	adds	r3, #2
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	041b      	lsls	r3, r3, #16
 8004764:	4313      	orrs	r3, r2
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	3252      	adds	r2, #82	; 0x52
 800476a:	3201      	adds	r2, #1
 800476c:	7812      	ldrb	r2, [r2, #0]
 800476e:	0212      	lsls	r2, r2, #8
 8004770:	4313      	orrs	r3, r2
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8004778:	4313      	orrs	r3, r2
 800477a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800477e:	4a06      	ldr	r2, [pc, #24]	; (8004798 <check_fs+0xd8>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d101      	bne.n	8004788 <check_fs+0xc8>
		return 0;
 8004784:	2300      	movs	r3, #0
 8004786:	e000      	b.n	800478a <check_fs+0xca>

	return 1;
 8004788:	2301      	movs	r3, #1
}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	ffffaa55 	.word	0xffffaa55
 8004798:	00544146 	.word	0x00544146

0800479c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b096      	sub	sp, #88	; 0x58
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	4613      	mov	r3, r2
 80047a8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80047b0:	68b8      	ldr	r0, [r7, #8]
 80047b2:	f7ff ff41 	bl	8004638 <get_ldnumber>
 80047b6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80047b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	da01      	bge.n	80047c2 <find_volume+0x26>
 80047be:	230b      	movs	r3, #11
 80047c0:	e311      	b.n	8004de6 <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80047c2:	4a98      	ldr	r2, [pc, #608]	; (8004a24 <find_volume+0x288>)
 80047c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ca:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80047cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <find_volume+0x3a>
 80047d2:	230c      	movs	r3, #12
 80047d4:	e307      	b.n	8004de6 <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047da:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80047dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d01c      	beq.n	8004822 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80047e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ee:	785b      	ldrb	r3, [r3, #1]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7ff fdd5 	bl	80043a0 <disk_status>
 80047f6:	4603      	mov	r3, r0
 80047f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80047fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10c      	bne.n	8004822 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8004808:	79fb      	ldrb	r3, [r7, #7]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d007      	beq.n	800481e <find_volume+0x82>
 800480e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004812:	f003 0304 	and.w	r3, r3, #4
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800481a:	230a      	movs	r3, #10
 800481c:	e2e3      	b.n	8004de6 <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 800481e:	2300      	movs	r3, #0
 8004820:	e2e1      	b.n	8004de6 <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004828:	2200      	movs	r2, #0
 800482a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800482c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800482e:	b2da      	uxtb	r2, r3
 8004830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004836:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800483e:	785b      	ldrb	r3, [r3, #1]
 8004840:	4618      	mov	r0, r3
 8004842:	f7ff fdc7 	bl	80043d4 <disk_initialize>
 8004846:	4603      	mov	r3, r0
 8004848:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800484c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004858:	2303      	movs	r3, #3
 800485a:	e2c4      	b.n	8004de6 <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800485c:	79fb      	ldrb	r3, [r7, #7]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d007      	beq.n	8004872 <find_volume+0xd6>
 8004862:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004866:	f003 0304 	and.w	r3, r3, #4
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800486e:	230a      	movs	r3, #10
 8004870:	e2b9      	b.n	8004de6 <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8004872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004878:	7858      	ldrb	r0, [r3, #1]
 800487a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004880:	330a      	adds	r3, #10
 8004882:	461a      	mov	r2, r3
 8004884:	2102      	movs	r1, #2
 8004886:	f7ff fe0b 	bl	80044a0 <disk_ioctl>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10d      	bne.n	80048ac <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8004890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004896:	895b      	ldrh	r3, [r3, #10]
 8004898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800489c:	d306      	bcc.n	80048ac <find_volume+0x110>
 800489e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048a4:	895b      	ldrh	r3, [r3, #10]
 80048a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048aa:	d901      	bls.n	80048b0 <find_volume+0x114>
 80048ac:	2301      	movs	r3, #1
 80048ae:	e29a      	b.n	8004de6 <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80048b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80048b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80048b8:	f7ff ff02 	bl	80046c0 <check_fs>
 80048bc:	4603      	mov	r3, r0
 80048be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80048c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d153      	bne.n	8004972 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80048ca:	2300      	movs	r3, #0
 80048cc:	643b      	str	r3, [r7, #64]	; 0x40
 80048ce:	e028      	b.n	8004922 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80048d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048d4:	011b      	lsls	r3, r3, #4
 80048d6:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80048da:	4413      	add	r3, r2
 80048dc:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80048de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e0:	3304      	adds	r3, #4
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d012      	beq.n	800490e <find_volume+0x172>
 80048e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ea:	330b      	adds	r3, #11
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	061a      	lsls	r2, r3, #24
 80048f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f2:	330a      	adds	r3, #10
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	041b      	lsls	r3, r3, #16
 80048f8:	4313      	orrs	r3, r2
 80048fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048fc:	3209      	adds	r2, #9
 80048fe:	7812      	ldrb	r2, [r2, #0]
 8004900:	0212      	lsls	r2, r2, #8
 8004902:	4313      	orrs	r3, r2
 8004904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004906:	3208      	adds	r2, #8
 8004908:	7812      	ldrb	r2, [r2, #0]
 800490a:	431a      	orrs	r2, r3
 800490c:	e000      	b.n	8004910 <find_volume+0x174>
 800490e:	2200      	movs	r2, #0
 8004910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	3358      	adds	r3, #88	; 0x58
 8004916:	443b      	add	r3, r7
 8004918:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800491c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800491e:	3301      	adds	r3, #1
 8004920:	643b      	str	r3, [r7, #64]	; 0x40
 8004922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004924:	2b03      	cmp	r3, #3
 8004926:	d9d3      	bls.n	80048d0 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8004928:	2300      	movs	r3, #0
 800492a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800492c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <find_volume+0x19c>
 8004932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004934:	3b01      	subs	r3, #1
 8004936:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8004938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	3358      	adds	r3, #88	; 0x58
 800493e:	443b      	add	r3, r7
 8004940:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004944:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8004946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004948:	2b00      	cmp	r3, #0
 800494a:	d005      	beq.n	8004958 <find_volume+0x1bc>
 800494c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800494e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004950:	f7ff feb6 	bl	80046c0 <check_fs>
 8004954:	4603      	mov	r3, r0
 8004956:	e000      	b.n	800495a <find_volume+0x1be>
 8004958:	2302      	movs	r3, #2
 800495a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800495e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004962:	2b00      	cmp	r3, #0
 8004964:	d005      	beq.n	8004972 <find_volume+0x1d6>
 8004966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004968:	3301      	adds	r3, #1
 800496a:	643b      	str	r3, [r7, #64]	; 0x40
 800496c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800496e:	2b03      	cmp	r3, #3
 8004970:	d9e2      	bls.n	8004938 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004972:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004976:	2b03      	cmp	r3, #3
 8004978:	d101      	bne.n	800497e <find_volume+0x1e2>
 800497a:	2301      	movs	r3, #1
 800497c:	e233      	b.n	8004de6 <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800497e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <find_volume+0x1ee>
 8004986:	230d      	movs	r3, #13
 8004988:	e22d      	b.n	8004de6 <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800498a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498c:	7b1b      	ldrb	r3, [r3, #12]
 800498e:	021b      	lsls	r3, r3, #8
 8004990:	b21a      	sxth	r2, r3
 8004992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004994:	7adb      	ldrb	r3, [r3, #11]
 8004996:	b21b      	sxth	r3, r3
 8004998:	4313      	orrs	r3, r2
 800499a:	b21a      	sxth	r2, r3
 800499c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049a2:	895b      	ldrh	r3, [r3, #10]
 80049a4:	b21b      	sxth	r3, r3
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d001      	beq.n	80049ae <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 80049aa:	230d      	movs	r3, #13
 80049ac:	e21b      	b.n	8004de6 <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80049ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b0:	7ddb      	ldrb	r3, [r3, #23]
 80049b2:	021b      	lsls	r3, r3, #8
 80049b4:	b21a      	sxth	r2, r3
 80049b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b8:	7d9b      	ldrb	r3, [r3, #22]
 80049ba:	b21b      	sxth	r3, r3
 80049bc:	4313      	orrs	r3, r2
 80049be:	b21b      	sxth	r3, r3
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80049c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d112      	bne.n	80049f0 <find_volume+0x254>
 80049ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049cc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80049d0:	061a      	lsls	r2, r3, #24
 80049d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80049d8:	041b      	lsls	r3, r3, #16
 80049da:	4313      	orrs	r3, r2
 80049dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049de:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80049e2:	0212      	lsls	r2, r2, #8
 80049e4:	4313      	orrs	r3, r2
 80049e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049e8:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80049ec:	4313      	orrs	r3, r2
 80049ee:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 80049f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049f6:	461a      	mov	r2, r3
 80049f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049fa:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80049fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fe:	7c1a      	ldrb	r2, [r3, #16]
 8004a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a06:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8004a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a0e:	78db      	ldrb	r3, [r3, #3]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d009      	beq.n	8004a28 <find_volume+0x28c>
 8004a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a1a:	78db      	ldrb	r3, [r3, #3]
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d003      	beq.n	8004a28 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 8004a20:	230d      	movs	r3, #13
 8004a22:	e1e0      	b.n	8004de6 <find_volume+0x64a>
 8004a24:	20000140 	.word	0x20000140
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8004a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a2e:	78db      	ldrb	r3, [r3, #3]
 8004a30:	461a      	mov	r2, r3
 8004a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a34:	fb02 f303 	mul.w	r3, r2, r3
 8004a38:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8004a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3c:	7b5a      	ldrb	r2, [r3, #13]
 8004a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a44:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8004a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a4c:	789b      	ldrb	r3, [r3, #2]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00c      	beq.n	8004a6c <find_volume+0x2d0>
 8004a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a58:	789b      	ldrb	r3, [r3, #2]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a62:	789b      	ldrb	r3, [r3, #2]
 8004a64:	3b01      	subs	r3, #1
 8004a66:	4013      	ands	r3, r2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8004a6c:	230d      	movs	r3, #13
 8004a6e:	e1ba      	b.n	8004de6 <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8004a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a72:	7c9b      	ldrb	r3, [r3, #18]
 8004a74:	021b      	lsls	r3, r3, #8
 8004a76:	b21a      	sxth	r2, r3
 8004a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7a:	7c5b      	ldrb	r3, [r3, #17]
 8004a7c:	b21b      	sxth	r3, r3
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	b21b      	sxth	r3, r3
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a8a:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8004a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a92:	891b      	ldrh	r3, [r3, #8]
 8004a94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a96:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a9a:	8952      	ldrh	r2, [r2, #10]
 8004a9c:	0952      	lsrs	r2, r2, #5
 8004a9e:	b292      	uxth	r2, r2
 8004aa0:	fbb3 f1f2 	udiv	r1, r3, r2
 8004aa4:	fb01 f202 	mul.w	r2, r1, r2
 8004aa8:	1a9b      	subs	r3, r3, r2
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 8004ab0:	230d      	movs	r3, #13
 8004ab2:	e198      	b.n	8004de6 <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8004ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab6:	7d1b      	ldrb	r3, [r3, #20]
 8004ab8:	021b      	lsls	r3, r3, #8
 8004aba:	b21a      	sxth	r2, r3
 8004abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004abe:	7cdb      	ldrb	r3, [r3, #19]
 8004ac0:	b21b      	sxth	r3, r3
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	b21b      	sxth	r3, r3
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8004aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d112      	bne.n	8004af6 <find_volume+0x35a>
 8004ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004ad6:	061a      	lsls	r2, r3, #24
 8004ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ada:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004ade:	041b      	lsls	r3, r3, #16
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ae4:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8004ae8:	0212      	lsls	r2, r2, #8
 8004aea:	4313      	orrs	r3, r2
 8004aec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004aee:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8004af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af8:	7bdb      	ldrb	r3, [r3, #15]
 8004afa:	021b      	lsls	r3, r3, #8
 8004afc:	b21a      	sxth	r2, r3
 8004afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b00:	7b9b      	ldrb	r3, [r3, #14]
 8004b02:	b21b      	sxth	r3, r3
 8004b04:	4313      	orrs	r3, r2
 8004b06:	b21b      	sxth	r3, r3
 8004b08:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8004b0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <find_volume+0x378>
 8004b10:	230d      	movs	r3, #13
 8004b12:	e168      	b.n	8004de6 <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8004b14:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b18:	4413      	add	r3, r2
 8004b1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b1c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b20:	8911      	ldrh	r1, [r2, #8]
 8004b22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b24:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b28:	8952      	ldrh	r2, [r2, #10]
 8004b2a:	0952      	lsrs	r2, r2, #5
 8004b2c:	b292      	uxth	r2, r2
 8004b2e:	fbb1 f2f2 	udiv	r2, r1, r2
 8004b32:	b292      	uxth	r2, r2
 8004b34:	4413      	add	r3, r2
 8004b36:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004b38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d201      	bcs.n	8004b44 <find_volume+0x3a8>
 8004b40:	230d      	movs	r3, #13
 8004b42:	e150      	b.n	8004de6 <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8004b44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b4c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b50:	7892      	ldrb	r2, [r2, #2]
 8004b52:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b56:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <find_volume+0x3c6>
 8004b5e:	230d      	movs	r3, #13
 8004b60:	e141      	b.n	8004de6 <find_volume+0x64a>
	fmt = FS_FAT12;
 8004b62:	2301      	movs	r3, #1
 8004b64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d902      	bls.n	8004b78 <find_volume+0x3dc>
 8004b72:	2302      	movs	r3, #2
 8004b74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d902      	bls.n	8004b88 <find_volume+0x3ec>
 8004b82:	2303      	movs	r3, #3
 8004b84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	3302      	adds	r3, #2
 8004b8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b92:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8004b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b9e:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8004ba0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ba4:	4413      	add	r3, r2
 8004ba6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ba8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004bac:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8004bae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb2:	4413      	add	r3, r2
 8004bb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bb6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004bba:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 8004bbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bc0:	2b03      	cmp	r3, #3
 8004bc2:	d124      	bne.n	8004c0e <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8004bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bca:	891b      	ldrh	r3, [r3, #8]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <find_volume+0x438>
 8004bd0:	230d      	movs	r3, #13
 8004bd2:	e108      	b.n	8004de6 <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8004bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004bda:	061a      	lsls	r2, r3, #24
 8004bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bde:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004be2:	041b      	lsls	r3, r3, #16
 8004be4:	4313      	orrs	r3, r2
 8004be6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004be8:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8004bec:	0212      	lsls	r2, r2, #8
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bf2:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bfa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004bfe:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8004c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c0c:	e02b      	b.n	8004c66 <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8004c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c14:	891b      	ldrh	r3, [r3, #8]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <find_volume+0x482>
 8004c1a:	230d      	movs	r3, #13
 8004c1c:	e0e3      	b.n	8004de6 <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8004c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c24:	6a1a      	ldr	r2, [r3, #32]
 8004c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c28:	4413      	add	r3, r2
 8004c2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c2c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c30:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004c32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d105      	bne.n	8004c46 <find_volume+0x4aa>
 8004c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	e00e      	b.n	8004c64 <find_volume+0x4c8>
 8004c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c4c:	695a      	ldr	r2, [r3, #20]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	4413      	add	r3, r2
 8004c54:	085a      	lsrs	r2, r3, #1
 8004c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8004c64:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8004c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c6c:	699a      	ldr	r2, [r3, #24]
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c74:	895b      	ldrh	r3, [r3, #10]
 8004c76:	4619      	mov	r1, r3
 8004c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c7a:	440b      	add	r3, r1
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c80:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8004c84:	8949      	ldrh	r1, [r1, #10]
 8004c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d201      	bcs.n	8004c92 <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 8004c8e:	230d      	movs	r3, #13
 8004c90:	e0a9      	b.n	8004de6 <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8004c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c98:	461a      	mov	r2, r3
 8004c9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c9e:	6113      	str	r3, [r2, #16]
 8004ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004caa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004cae:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cb6:	2280      	movs	r2, #128	; 0x80
 8004cb8:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8004cba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cbe:	2b03      	cmp	r3, #3
 8004cc0:	d17a      	bne.n	8004db8 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8004cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004cc8:	021b      	lsls	r3, r3, #8
 8004cca:	b21a      	sxth	r2, r3
 8004ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004cd2:	b21b      	sxth	r3, r3
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	b21b      	sxth	r3, r3
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d16d      	bne.n	8004db8 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8004cdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cde:	3301      	adds	r3, #1
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ce4:	f7ff fc76 	bl	80045d4 <move_window>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d164      	bne.n	8004db8 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 8004cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfa:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8004cfe:	021b      	lsls	r3, r3, #8
 8004d00:	b21a      	sxth	r2, r3
 8004d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d04:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8004d08:	b21b      	sxth	r3, r3
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	b21b      	sxth	r3, r3
 8004d0e:	4a38      	ldr	r2, [pc, #224]	; (8004df0 <find_volume+0x654>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d151      	bne.n	8004db8 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8004d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d16:	78db      	ldrb	r3, [r3, #3]
 8004d18:	061a      	lsls	r2, r3, #24
 8004d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1c:	789b      	ldrb	r3, [r3, #2]
 8004d1e:	041b      	lsls	r3, r3, #16
 8004d20:	4313      	orrs	r3, r2
 8004d22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d24:	7852      	ldrb	r2, [r2, #1]
 8004d26:	0212      	lsls	r2, r2, #8
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d2c:	7812      	ldrb	r2, [r2, #0]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	4a30      	ldr	r2, [pc, #192]	; (8004df4 <find_volume+0x658>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d140      	bne.n	8004db8 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8004d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d38:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8004d3c:	061a      	lsls	r2, r3, #24
 8004d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d40:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8004d44:	041b      	lsls	r3, r3, #16
 8004d46:	4313      	orrs	r3, r2
 8004d48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d4a:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8004d4e:	0212      	lsls	r2, r2, #8
 8004d50:	4313      	orrs	r3, r2
 8004d52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d54:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	4a27      	ldr	r2, [pc, #156]	; (8004df8 <find_volume+0x65c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d12b      	bne.n	8004db8 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8004d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d62:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8004d66:	061a      	lsls	r2, r3, #24
 8004d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6a:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8004d6e:	041b      	lsls	r3, r3, #16
 8004d70:	4313      	orrs	r3, r2
 8004d72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d74:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8004d78:	0212      	lsls	r2, r2, #8
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d7e:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8004d82:	4313      	orrs	r3, r2
 8004d84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d86:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004d8a:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8004d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8e:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8004d92:	061a      	lsls	r2, r3, #24
 8004d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d96:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8004d9a:	041b      	lsls	r3, r3, #16
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004da0:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8004da4:	0212      	lsls	r2, r2, #8
 8004da6:	4313      	orrs	r3, r2
 8004da8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004daa:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8004dae:	4313      	orrs	r3, r2
 8004db0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004db2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004db6:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8004db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004dc4:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8004dc6:	4b0d      	ldr	r3, [pc, #52]	; (8004dfc <find_volume+0x660>)
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	4b0b      	ldr	r3, [pc, #44]	; (8004dfc <find_volume+0x660>)
 8004dd0:	801a      	strh	r2, [r3, #0]
 8004dd2:	4b0a      	ldr	r3, [pc, #40]	; (8004dfc <find_volume+0x660>)
 8004dd4:	881a      	ldrh	r2, [r3, #0]
 8004dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ddc:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8004dde:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004de0:	f7ff fb7c 	bl	80044dc <clear_lock>
#endif

	return FR_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3758      	adds	r7, #88	; 0x58
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	ffffaa55 	.word	0xffffaa55
 8004df4:	41615252 	.word	0x41615252
 8004df8:	61417272 	.word	0x61417272
 8004dfc:	20000144 	.word	0x20000144

08004e00 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b088      	sub	sp, #32
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8004e12:	f107 0310 	add.w	r3, r7, #16
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7ff fc0e 	bl	8004638 <get_ldnumber>
 8004e1c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	da01      	bge.n	8004e28 <f_mount+0x28>
 8004e24:	230b      	movs	r3, #11
 8004e26:	e02f      	b.n	8004e88 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004e28:	4a19      	ldr	r2, [pc, #100]	; (8004e90 <f_mount+0x90>)
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e30:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d007      	beq.n	8004e48 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8004e38:	69b8      	ldr	r0, [r7, #24]
 8004e3a:	f7ff fb4f 	bl	80044dc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e44:	2200      	movs	r2, #0
 8004e46:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d004      	beq.n	8004e58 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e54:	2200      	movs	r2, #0
 8004e56:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	490d      	ldr	r1, [pc, #52]	; (8004e90 <f_mount+0x90>)
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <f_mount+0x6e>
 8004e68:	79fb      	ldrb	r3, [r7, #7]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d001      	beq.n	8004e72 <f_mount+0x72>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	e00a      	b.n	8004e88 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8004e72:	f107 0108 	add.w	r1, r7, #8
 8004e76:	f107 030c 	add.w	r3, r7, #12
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7ff fc8d 	bl	800479c <find_volume>
 8004e82:	4603      	mov	r3, r0
 8004e84:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3720      	adds	r7, #32
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	20000140 	.word	0x20000140

08004e94 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b087      	sub	sp, #28
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8004eaa:	4b1f      	ldr	r3, [pc, #124]	; (8004f28 <FATFS_LinkDriverEx+0x94>)
 8004eac:	7a5b      	ldrb	r3, [r3, #9]
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d831      	bhi.n	8004f18 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004eb4:	4b1c      	ldr	r3, [pc, #112]	; (8004f28 <FATFS_LinkDriverEx+0x94>)
 8004eb6:	7a5b      	ldrb	r3, [r3, #9]
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	461a      	mov	r2, r3
 8004ebc:	4b1a      	ldr	r3, [pc, #104]	; (8004f28 <FATFS_LinkDriverEx+0x94>)
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8004ec2:	4b19      	ldr	r3, [pc, #100]	; (8004f28 <FATFS_LinkDriverEx+0x94>)
 8004ec4:	7a5b      	ldrb	r3, [r3, #9]
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	4a17      	ldr	r2, [pc, #92]	; (8004f28 <FATFS_LinkDriverEx+0x94>)
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4413      	add	r3, r2
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8004ed2:	4b15      	ldr	r3, [pc, #84]	; (8004f28 <FATFS_LinkDriverEx+0x94>)
 8004ed4:	7a5b      	ldrb	r3, [r3, #9]
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	461a      	mov	r2, r3
 8004eda:	4b13      	ldr	r3, [pc, #76]	; (8004f28 <FATFS_LinkDriverEx+0x94>)
 8004edc:	4413      	add	r3, r2
 8004ede:	79fa      	ldrb	r2, [r7, #7]
 8004ee0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004ee2:	4b11      	ldr	r3, [pc, #68]	; (8004f28 <FATFS_LinkDriverEx+0x94>)
 8004ee4:	7a5b      	ldrb	r3, [r3, #9]
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	b2d1      	uxtb	r1, r2
 8004eec:	4a0e      	ldr	r2, [pc, #56]	; (8004f28 <FATFS_LinkDriverEx+0x94>)
 8004eee:	7251      	strb	r1, [r2, #9]
 8004ef0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004ef2:	7dbb      	ldrb	r3, [r7, #22]
 8004ef4:	3330      	adds	r3, #48	; 0x30
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	3301      	adds	r3, #1
 8004f00:	223a      	movs	r2, #58	; 0x3a
 8004f02:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	3302      	adds	r3, #2
 8004f08:	222f      	movs	r2, #47	; 0x2f
 8004f0a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	3303      	adds	r3, #3
 8004f10:	2200      	movs	r2, #0
 8004f12:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004f14:	2300      	movs	r3, #0
 8004f16:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8004f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	371c      	adds	r7, #28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	20000160 	.word	0x20000160

08004f2c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8004f36:	2200      	movs	r2, #0
 8004f38:	6839      	ldr	r1, [r7, #0]
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7ff ffaa 	bl	8004e94 <FATFS_LinkDriverEx>
 8004f40:	4603      	mov	r3, r0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
	...

08004f4c <__libc_init_array>:
 8004f4c:	b570      	push	{r4, r5, r6, lr}
 8004f4e:	4d0d      	ldr	r5, [pc, #52]	; (8004f84 <__libc_init_array+0x38>)
 8004f50:	4c0d      	ldr	r4, [pc, #52]	; (8004f88 <__libc_init_array+0x3c>)
 8004f52:	1b64      	subs	r4, r4, r5
 8004f54:	10a4      	asrs	r4, r4, #2
 8004f56:	2600      	movs	r6, #0
 8004f58:	42a6      	cmp	r6, r4
 8004f5a:	d109      	bne.n	8004f70 <__libc_init_array+0x24>
 8004f5c:	4d0b      	ldr	r5, [pc, #44]	; (8004f8c <__libc_init_array+0x40>)
 8004f5e:	4c0c      	ldr	r4, [pc, #48]	; (8004f90 <__libc_init_array+0x44>)
 8004f60:	f000 f820 	bl	8004fa4 <_init>
 8004f64:	1b64      	subs	r4, r4, r5
 8004f66:	10a4      	asrs	r4, r4, #2
 8004f68:	2600      	movs	r6, #0
 8004f6a:	42a6      	cmp	r6, r4
 8004f6c:	d105      	bne.n	8004f7a <__libc_init_array+0x2e>
 8004f6e:	bd70      	pop	{r4, r5, r6, pc}
 8004f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f74:	4798      	blx	r3
 8004f76:	3601      	adds	r6, #1
 8004f78:	e7ee      	b.n	8004f58 <__libc_init_array+0xc>
 8004f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f7e:	4798      	blx	r3
 8004f80:	3601      	adds	r6, #1
 8004f82:	e7f2      	b.n	8004f6a <__libc_init_array+0x1e>
 8004f84:	08004ff8 	.word	0x08004ff8
 8004f88:	08004ff8 	.word	0x08004ff8
 8004f8c:	08004ff8 	.word	0x08004ff8
 8004f90:	08004ffc 	.word	0x08004ffc

08004f94 <memset>:
 8004f94:	4402      	add	r2, r0
 8004f96:	4603      	mov	r3, r0
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d100      	bne.n	8004f9e <memset+0xa>
 8004f9c:	4770      	bx	lr
 8004f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8004fa2:	e7f9      	b.n	8004f98 <memset+0x4>

08004fa4 <_init>:
 8004fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa6:	bf00      	nop
 8004fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004faa:	bc08      	pop	{r3}
 8004fac:	469e      	mov	lr, r3
 8004fae:	4770      	bx	lr

08004fb0 <_fini>:
 8004fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb2:	bf00      	nop
 8004fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fb6:	bc08      	pop	{r3}
 8004fb8:	469e      	mov	lr, r3
 8004fba:	4770      	bx	lr
